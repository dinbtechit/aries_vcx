name: Build & Test

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
  #schedule:
    # runs the CI everyday at 10AM
    #- cron: "0 10 * * *"

jobs:
  # General build, check, and test steps
  build_and_test:
    if: github.repository == 'disabled'
    runs-on: ubuntu-latest

    steps:
      # Setup
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - uses: bluefireteam/melos-action@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Install Aries VCX Dependencies
        run: sudo apt-get install -y libssl-dev libzmq3-dev
      # Rust
#      - name: Check Rust format
#        working-directory: ./packages/aries_vcx/native/src
#        run: rustfmt --check lib.rs
#      - name: Rust code analysis
#        run: cargo clippy -- -D warnings
      - name: Run Rust tests
        run: cargo test
      - name: Build Rust code (aries_vcx) for Dart tests
        run: cargo build -r

      # Dart/Flutter
#      - name: Check Dart format
#        run: melos run check-format --no-select
#      - name: Dart code analysis
#        run: melos run analyze --no-select
#      - name: Run Dart tests
#        uses: Wandalen/wretry.action@master # sometimes stream tests are flaky
#        with:
#          command: melos run test
#          attempt_limit: 5

  macos_integration_test:
    if: github.repository == 'disabled'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - uses: bluefireteam/melos-action@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build the XCFramework
        run: |
          wget https://github.com/macports/macports-base/releases/download/v2.8.0/MacPorts-2.8.0-12-Monterey.pkg
          sudo installer -pkg ./MacPorts-2.8.0-12-Monterey.pkg -target /
          export PATH=/opt/local/bin:/opt/local/sbin:$PATH
          sudo port install openssl +universal zmq +universal
          melos run build:macos
      - name: Copy the XCFramework to the needed location
        run: |
          CURR_VERSION=aries_vcx-v`awk '/^version: /{print $2}' packages/aries_vcx/pubspec.yaml`
          cp platform-build/AriesVcx.xcframework.zip packages/flutter_aries_vcx/macos/Frameworks/$CURR_VERSION.zip
          echo Copied file!

#      - name: Run Flutter integration tests
#        working-directory: packages/flutter_aries_vcx/example
#        run: flutter test -d macos integration_test

  windows_integration_test:
    #if: github.repository == 'disabled'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - uses: bluefireteam/melos-action@v2
      - uses: crazy-max/ghaction-chocolatey@v2
      - uses: KyleMayes/install-llvm-action@v1
        with:
          version: "15"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Build the binaries
        run: melos run build:windows
      - name: Copy the binaries to the needed location
        shell: bash
        run: |
          CURR_VERSION=aries_vcx-v`awk '/^version: /{print $2}' packages/aries_vcx/pubspec.yaml`
          cp platform-build/AriesVcx-windows.tar.gz packages/flutter_aries_vcx/windows/$CURR_VERSION.tar.gz
          echo Copied file!
          ls -la target
          

#      - name: Run Flutter integration tests
#        working-directory: packages/flutter_aries_vcx/example
#        run: flutter test -d windows integration_test

  linux_integration_test:
    #if: github.repository == 'disabled'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies for flutter integration test
        run: sudo apt update && sudo apt-get install -y libglu1-mesa ninja-build clang cmake pkg-config libgtk-3-dev liblzma-dev
      - name: Install Aries VCX dependencies
        run: sudo apt-get install -y libssl-dev libzmq3-dev
      - uses: pyvista/setup-headless-display-action@v1
      - uses: subosito/flutter-action@v2
      - uses: bluefireteam/melos-action@v2
      - uses: goto-bus-stop/setup-zig@v2
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build the binaries
        run: melos run build:other
      - name: Copy the binaries to the needed location
        run: |
          CURR_VERSION=aries_vcx-v`awk '/^version: /{print $2}' packages/aries_vcx/pubspec.yaml`
          cp platform-build/AriesVcx-linux*.tar.gz packages/flutter_aries_vcx/linux/
          echo Copied file!

      - name: Run Flutter integration tests
        working-directory: packages/flutter_aries_vcx/example
        run: flutter test -d linux integration_test

  ios_integration_test:
    if: github.repository == 'disabled'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - uses: bluefireteam/melos-action@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Start iOS Simulator
        run: |
          DEVICE_ID=$(xcrun xctrace list devices | grep iPhone | head -1 | awk '{print $NF}' | tr -d '()')
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          xcrun simctl boot $DEVICE_ID

      - name: Build the XCFramework
        run: |
          wget https://github.com/macports/macports-base/releases/download/v2.8.0/MacPorts-2.8.0-12-Monterey.pkg
          sudo installer -pkg ./MacPorts-2.8.0-12-Monterey.pkg -target /
          export PATH=/opt/local/bin:/opt/local/sbin:$PATH
          sudo port install openssl +universal zmq +universal
          melos run build:apple
      - name: Copy the XCFramework to the needed location
        run: |
          CURR_VERSION=aries_vcx-v`awk '/^version: /{print $2}' packages/aries_vcx/pubspec.yaml`
          cp platform-build/AriesVcx.xcframework.zip packages/flutter_aries_vcx/ios/Frameworks/$CURR_VERSION.zip
          echo Copied file!

#      - name: Run Flutter integration tests
#        working-directory: packages/flutter_aries_vcx/example
#        run: flutter test -d ${{ env.DEVICE_ID }} integration_test

  android_integration_test:
    #if: github.repository == 'disabled'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - uses: bluefireteam/melos-action@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: "11.x"
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0

      - name: Build the binaries
        run: melos run build:android
      - name: Copy the binaries to the needed location
        run: |
          CURR_VERSION=aries_vcx-v`awk '/^version: /{print $2}' packages/aries_vcx/pubspec.yaml`
          cp platform-build/AriesVcxAndroid.tar.gz packages/flutter_aries_vcx/android/$CURR_VERSION.tar.gz
          echo Copied file!
          ls -la platform-build
          ls -la target

#      - name: Run Flutter integration tests
#        uses: Wandalen/wretry.action@master # sometimes android tests are flaky
#        with:
#          attempt_limit: 5
#          action: reactivecircus/android-emulator-runner@v2
#          with: |
#            api-level: 33
#            target: google_apis
#            arch: x86_64
#            ram-size: 1024M
#            disk-size: 2048M
#            script: cd packages/flutter_aries_vcx/example && flutter test -d `flutter devices | grep android | tr ' ' '\n' | grep emulator-` integration_test
