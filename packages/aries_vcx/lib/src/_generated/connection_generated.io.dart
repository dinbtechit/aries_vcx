// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'connection_generated.dart';
export 'connection_generated.dart';
import 'dart:ffi' as ffi;

class ConnectionPlatform extends FlutterRustBridgeBase<ConnectionWire> {
  ConnectionPlatform(ffi.DynamicLibrary dylib) : super(ConnectionWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_2(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_PairwiseInfo> api2wire_box_autoadd_pairwise_info(
      PairwiseInfo raw) {
    final ptr = inner.new_box_autoadd_pairwise_info_2();
    _api_fill_to_wire_pairwise_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PairwiseInfo> api2wire_opt_box_autoadd_pairwise_info(
      PairwiseInfo? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_pairwise_info(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_2(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_pairwise_info(
      PairwiseInfo apiObj, ffi.Pointer<wire_PairwiseInfo> wireObj) {
    _api_fill_to_wire_pairwise_info(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_opt_box_autoadd_pairwise_info(
      PairwiseInfo? apiObj, ffi.Pointer<wire_PairwiseInfo> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_pairwise_info(apiObj, wireObj);
  }

  void _api_fill_to_wire_pairwise_info(
      PairwiseInfo apiObj, wire_PairwiseInfo wireObj) {
    wireObj.pw_did = api2wire_String(apiObj.pwDid);
    wireObj.pw_vk = api2wire_String(apiObj.pwVk);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ConnectionWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ConnectionWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ConnectionWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_connection_create_inviter(
    int port_,
    ffi.Pointer<wire_PairwiseInfo> pw_info,
  ) {
    return _wire_connection_create_inviter(
      port_,
      pw_info,
    );
  }

  late final _wire_connection_create_inviterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PairwiseInfo>)>>(
      'wire_connection_create_inviter');
  late final _wire_connection_create_inviter =
      _wire_connection_create_inviterPtr
          .asFunction<void Function(int, ffi.Pointer<wire_PairwiseInfo>)>();

  void wire_connection_create_invitee(
    int port_,
    ffi.Pointer<wire_uint_8_list> invitation,
  ) {
    return _wire_connection_create_invitee(
      port_,
      invitation,
    );
  }

  late final _wire_connection_create_inviteePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connection_create_invitee');
  late final _wire_connection_create_invitee =
      _wire_connection_create_inviteePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_get_thread_id(
    int port_,
    int handle,
  ) {
    return _wire_connection_get_thread_id(
      port_,
      handle,
    );
  }

  late final _wire_connection_get_thread_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_get_thread_id');
  late final _wire_connection_get_thread_id =
      _wire_connection_get_thread_idPtr.asFunction<void Function(int, int)>();

  void wire_connection_get_pairwise_info(
    int port_,
    int handle,
  ) {
    return _wire_connection_get_pairwise_info(
      port_,
      handle,
    );
  }

  late final _wire_connection_get_pairwise_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_get_pairwise_info');
  late final _wire_connection_get_pairwise_info =
      _wire_connection_get_pairwise_infoPtr
          .asFunction<void Function(int, int)>();

  void wire_connection_get_remote_did(
    int port_,
    int handle,
  ) {
    return _wire_connection_get_remote_did(
      port_,
      handle,
    );
  }

  late final _wire_connection_get_remote_didPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_get_remote_did');
  late final _wire_connection_get_remote_did =
      _wire_connection_get_remote_didPtr.asFunction<void Function(int, int)>();

  void wire_connection_get_remote_vk(
    int port_,
    int handle,
  ) {
    return _wire_connection_get_remote_vk(
      port_,
      handle,
    );
  }

  late final _wire_connection_get_remote_vkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_get_remote_vk');
  late final _wire_connection_get_remote_vk =
      _wire_connection_get_remote_vkPtr.asFunction<void Function(int, int)>();

  void wire_connection_get_state(
    int port_,
    int handle,
  ) {
    return _wire_connection_get_state(
      port_,
      handle,
    );
  }

  late final _wire_connection_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_get_state');
  late final _wire_connection_get_state =
      _wire_connection_get_statePtr.asFunction<void Function(int, int)>();

  void wire_connection_get_invitation(
    int port_,
    int handle,
  ) {
    return _wire_connection_get_invitation(
      port_,
      handle,
    );
  }

  late final _wire_connection_get_invitationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_get_invitation');
  late final _wire_connection_get_invitation =
      _wire_connection_get_invitationPtr.asFunction<void Function(int, int)>();

  void wire_connection_process_invite(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> invitation,
  ) {
    return _wire_connection_process_invite(
      port_,
      handle,
      invitation,
    );
  }

  late final _wire_connection_process_invitePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Uint32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connection_process_invite');
  late final _wire_connection_process_invite =
      _wire_connection_process_invitePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_process_request(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> request,
    ffi.Pointer<wire_uint_8_list> service_endpoint,
    ffi.Pointer<wire_StringList> routing_keys,
  ) {
    return _wire_connection_process_request(
      port_,
      handle,
      request,
      service_endpoint,
      routing_keys,
    );
  }

  late final _wire_connection_process_requestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Uint32,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_StringList>)>>(
      'wire_connection_process_request');
  late final _wire_connection_process_request =
      _wire_connection_process_requestPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_connection_process_response(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> response,
  ) {
    return _wire_connection_process_response(
      port_,
      handle,
      response,
    );
  }

  late final _wire_connection_process_responsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Uint32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connection_process_response');
  late final _wire_connection_process_response =
      _wire_connection_process_responsePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_process_ack(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> message,
  ) {
    return _wire_connection_process_ack(
      port_,
      handle,
      message,
    );
  }

  late final _wire_connection_process_ackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_connection_process_ack');
  late final _wire_connection_process_ack = _wire_connection_process_ackPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_process_problem_report(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> problem_report,
  ) {
    return _wire_connection_process_problem_report(
      port_,
      handle,
      problem_report,
    );
  }

  late final _wire_connection_process_problem_reportPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Uint32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connection_process_problem_report');
  late final _wire_connection_process_problem_report =
      _wire_connection_process_problem_reportPtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_send_response(
    int port_,
    int handle,
  ) {
    return _wire_connection_send_response(
      port_,
      handle,
    );
  }

  late final _wire_connection_send_responsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_send_response');
  late final _wire_connection_send_response =
      _wire_connection_send_responsePtr.asFunction<void Function(int, int)>();

  void wire_connection_send_request(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> service_endpoint,
    ffi.Pointer<wire_StringList> routing_keys,
  ) {
    return _wire_connection_send_request(
      port_,
      handle,
      service_endpoint,
      routing_keys,
    );
  }

  late final _wire_connection_send_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_connection_send_request');
  late final _wire_connection_send_request =
      _wire_connection_send_requestPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>();

  void wire_connection_send_ack(
    int port_,
    int handle,
  ) {
    return _wire_connection_send_ack(
      port_,
      handle,
    );
  }

  late final _wire_connection_send_ackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_send_ack');
  late final _wire_connection_send_ack =
      _wire_connection_send_ackPtr.asFunction<void Function(int, int)>();

  void wire_connection_send_generic_message(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> content,
  ) {
    return _wire_connection_send_generic_message(
      port_,
      handle,
      content,
    );
  }

  late final _wire_connection_send_generic_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Uint32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connection_send_generic_message');
  late final _wire_connection_send_generic_message =
      _wire_connection_send_generic_messagePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_send_aries_message(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> content,
  ) {
    return _wire_connection_send_aries_message(
      port_,
      handle,
      content,
    );
  }

  late final _wire_connection_send_aries_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Uint32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connection_send_aries_message');
  late final _wire_connection_send_aries_message =
      _wire_connection_send_aries_messagePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_create_invite(
    int port_,
    int handle,
    ffi.Pointer<wire_uint_8_list> service_endpoint,
    ffi.Pointer<wire_StringList> routing_keys,
  ) {
    return _wire_connection_create_invite(
      port_,
      handle,
      service_endpoint,
      routing_keys,
    );
  }

  late final _wire_connection_create_invitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_connection_create_invite');
  late final _wire_connection_create_invite =
      _wire_connection_create_invitePtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>();

  void wire_connection_serialize(
    int port_,
    int handle,
  ) {
    return _wire_connection_serialize(
      port_,
      handle,
    );
  }

  late final _wire_connection_serializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_serialize');
  late final _wire_connection_serialize =
      _wire_connection_serializePtr.asFunction<void Function(int, int)>();

  void wire_connection_deserialize(
    int port_,
    ffi.Pointer<wire_uint_8_list> connection_data,
  ) {
    return _wire_connection_deserialize(
      port_,
      connection_data,
    );
  }

  late final _wire_connection_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_connection_deserialize');
  late final _wire_connection_deserialize = _wire_connection_deserializePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_connection_release(
    int port_,
    int handle,
  ) {
    return _wire_connection_release(
      port_,
      handle,
    );
  }

  late final _wire_connection_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_connection_release');
  late final _wire_connection_release =
      _wire_connection_releasePtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_StringList> new_StringList_2(
    int len,
  ) {
    return _new_StringList_2(
      len,
    );
  }

  late final _new_StringList_2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_2');
  late final _new_StringList_2 = _new_StringList_2Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_PairwiseInfo> new_box_autoadd_pairwise_info_2() {
    return _new_box_autoadd_pairwise_info_2();
  }

  late final _new_box_autoadd_pairwise_info_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PairwiseInfo> Function()>>(
          'new_box_autoadd_pairwise_info_2');
  late final _new_box_autoadd_pairwise_info_2 =
      _new_box_autoadd_pairwise_info_2Ptr
          .asFunction<ffi.Pointer<wire_PairwiseInfo> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_2(
    int len,
  ) {
    return _new_uint_8_list_2(
      len,
    );
  }

  late final _new_uint_8_list_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_2');
  late final _new_uint_8_list_2 = _new_uint_8_list_2Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<wire_AgencyClientConfig>
      new_box_autoadd_agency_client_config_0() {
    return _new_box_autoadd_agency_client_config_0();
  }

  late final _new_box_autoadd_agency_client_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_AgencyClientConfig> Function()>>(
      'new_box_autoadd_agency_client_config_0');
  late final _new_box_autoadd_agency_client_config_0 =
      _new_box_autoadd_agency_client_config_0Ptr
          .asFunction<ffi.Pointer<wire_AgencyClientConfig> Function()>();

  ffi.Pointer<wire_AgentProvisionConfig>
      new_box_autoadd_agent_provision_config_0() {
    return _new_box_autoadd_agent_provision_config_0();
  }

  late final _new_box_autoadd_agent_provision_config_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_AgentProvisionConfig>
              Function()>>('new_box_autoadd_agent_provision_config_0');
  late final _new_box_autoadd_agent_provision_config_0 =
      _new_box_autoadd_agent_provision_config_0Ptr
          .asFunction<ffi.Pointer<wire_AgentProvisionConfig> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_PairwiseInfo extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> pw_did;

  external ffi.Pointer<wire_uint_8_list> pw_vk;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_AgencyClientConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> agency_did;

  external ffi.Pointer<wire_uint_8_list> agency_endpoint;

  external ffi.Pointer<wire_uint_8_list> agency_verkey;

  external ffi.Pointer<wire_uint_8_list> remote_to_sdk_did;

  external ffi.Pointer<wire_uint_8_list> remote_to_sdk_verkey;

  external ffi.Pointer<wire_uint_8_list> sdk_to_remote_did;

  external ffi.Pointer<wire_uint_8_list> sdk_to_remote_verkey;
}

class wire_AgentProvisionConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> agency_did;

  external ffi.Pointer<wire_uint_8_list> agency_verkey;

  external ffi.Pointer<wire_uint_8_list> agency_endpoint;

  external ffi.Pointer<wire_uint_8_list> agent_seed;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
