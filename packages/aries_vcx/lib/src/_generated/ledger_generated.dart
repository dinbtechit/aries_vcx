// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'ledger_generated.io.dart'
    if (dart.library.html) 'ledger_generated.web.dart';

abstract class Ledger {
  Future<String> getLedgerAuthorAgreement({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetLedgerAuthorAgreementConstMeta;

  Future<void> setActiveTxnAuthorAgreementMeta(
      {String? text,
      String? version,
      String? hash,
      required String accMechType,
      required int timeOfAcceptance,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetActiveTxnAuthorAgreementMetaConstMeta;

  Future<AriesService> createService(
      {required String targetDid,
      required List<String> recipientKeys,
      required List<String> routingKeys,
      required String endpoint,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateServiceConstMeta;

  Future<AriesService> getServiceFromLedger(
      {required String targetDid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetServiceFromLedgerConstMeta;

  Future<String> getVerkeyFromLedger({required String did, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetVerkeyFromLedgerConstMeta;

  Future<String> getLedgerTxn(
      {required int seqNo, String? submitterDid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetLedgerTxnConstMeta;
}

class AriesService {
  final String id;
  final String type;
  final int priority;
  final List<String> recipientKeys;
  final List<String> routingKeys;
  final String serviceEndpoint;

  AriesService({
    required this.id,
    required this.type,
    required this.priority,
    required this.recipientKeys,
    required this.routingKeys,
    required this.serviceEndpoint,
  });
}

class LedgerImpl implements Ledger {
  final LedgerPlatform _platform;
  factory LedgerImpl(ExternalLibrary dylib) =>
      LedgerImpl.raw(LedgerPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LedgerImpl.wasm(FutureOr<WasmModule> module) =>
      LedgerImpl(module as ExternalLibrary);
  LedgerImpl.raw(this._platform);
  Future<String> getLedgerAuthorAgreement({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_ledger_author_agreement(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetLedgerAuthorAgreementConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetLedgerAuthorAgreementConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_ledger_author_agreement",
        argNames: [],
      );

  Future<void> setActiveTxnAuthorAgreementMeta(
      {String? text,
      String? version,
      String? hash,
      required String accMechType,
      required int timeOfAcceptance,
      dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(text);
    var arg1 = _platform.api2wire_opt_String(version);
    var arg2 = _platform.api2wire_opt_String(hash);
    var arg3 = _platform.api2wire_String(accMechType);
    var arg4 = _platform.api2wire_u64(timeOfAcceptance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_set_active_txn_author_agreement_meta(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetActiveTxnAuthorAgreementMetaConstMeta,
      argValues: [text, version, hash, accMechType, timeOfAcceptance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSetActiveTxnAuthorAgreementMetaConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "set_active_txn_author_agreement_meta",
            argNames: [
              "text",
              "version",
              "hash",
              "accMechType",
              "timeOfAcceptance"
            ],
          );

  Future<AriesService> createService(
      {required String targetDid,
      required List<String> recipientKeys,
      required List<String> routingKeys,
      required String endpoint,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(targetDid);
    var arg1 = _platform.api2wire_StringList(recipientKeys);
    var arg2 = _platform.api2wire_StringList(routingKeys);
    var arg3 = _platform.api2wire_String(endpoint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_service(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_aries_service,
      constMeta: kCreateServiceConstMeta,
      argValues: [targetDid, recipientKeys, routingKeys, endpoint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateServiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_service",
        argNames: ["targetDid", "recipientKeys", "routingKeys", "endpoint"],
      );

  Future<AriesService> getServiceFromLedger(
      {required String targetDid, dynamic hint}) {
    var arg0 = _platform.api2wire_String(targetDid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_service_from_ledger(port_, arg0),
      parseSuccessData: _wire2api_aries_service,
      constMeta: kGetServiceFromLedgerConstMeta,
      argValues: [targetDid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetServiceFromLedgerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_service_from_ledger",
        argNames: ["targetDid"],
      );

  Future<String> getVerkeyFromLedger({required String did, dynamic hint}) {
    var arg0 = _platform.api2wire_String(did);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_verkey_from_ledger(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetVerkeyFromLedgerConstMeta,
      argValues: [did],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetVerkeyFromLedgerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_verkey_from_ledger",
        argNames: ["did"],
      );

  Future<String> getLedgerTxn(
      {required int seqNo, String? submitterDid, dynamic hint}) {
    var arg0 = api2wire_i32(seqNo);
    var arg1 = _platform.api2wire_opt_String(submitterDid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_ledger_txn(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetLedgerTxnConstMeta,
      argValues: [seqNo, submitterDid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetLedgerTxnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_ledger_txn",
        argNames: ["seqNo", "submitterDid"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AriesService _wire2api_aries_service(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AriesService(
      id: _wire2api_String(arr[0]),
      type: _wire2api_String(arr[1]),
      priority: _wire2api_u32(arr[2]),
      recipientKeys: _wire2api_StringList(arr[3]),
      routingKeys: _wire2api_StringList(arr[4]),
      serviceEndpoint: _wire2api_String(arr[5]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
