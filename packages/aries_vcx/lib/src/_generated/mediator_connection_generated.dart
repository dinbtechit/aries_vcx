// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'mediator_connection_generated.io.dart'
    if (dart.library.html) 'mediator_connection_generated.web.dart';

abstract class MediatorConnection {
  Future<String> mediatedConnectionGeneratePublicInvite(
      {required String publicDid, required String label, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionGeneratePublicInviteConstMeta;

  Future<String> mediatedConnectionGetPwDid(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetPwDidConstMeta;

  Future<String> mediatedConnectionGetTheirPwDid(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetTheirPwDidConstMeta;

  Future<String> mediatedConnectionGetThreadId(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetThreadIdConstMeta;

  Future<int> mediatedConnectionGetState({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetStateConstMeta;

  Future<String> mediatedConnectionGetSourceId(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetSourceIdConstMeta;

  Future<int> mediatedConnectionCreate(
      {required String sourceId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionCreateConstMeta;

  Future<int> mediatedConnectionCreateWithInvite(
      {required String sourceId, required String details, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionCreateWithInviteConstMeta;

  Future<void> mediatedConnectionSendMessage(
      {required int handle, required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSendMessageConstMeta;

  Future<int> mediatedConnectionCreateWithConnectionRequestV2(
      {required String request, required String pwInfo, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionCreateWithConnectionRequestV2ConstMeta;

  Future<void> mediatedConnectionSendHandshakeReuse(
      {required int handle, required String oobMsg, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionSendHandshakeReuseConstMeta;

  Future<int> mediatedConnectionUpdateStateWithMessage(
      {required int handle, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionUpdateStateWithMessageConstMeta;

  Future<void> mediatedConnectionHandleMessage(
      {required int handle, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionHandleMessageConstMeta;

  Future<int> mediatedConnectionUpdateState(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionUpdateStateConstMeta;

  Future<void> mediatedConnectionDeleteConnection(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionDeleteConnectionConstMeta;

  Future<void> mediatedConnectionConnect({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionConnectConstMeta;

  Future<String> mediatedConnectionSerialize(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSerializeConstMeta;

  Future<int> mediatedConnectionDeserialize(
      {required String connectionData, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionDeserializeConstMeta;

  Future<void> mediatedConnectionRelease({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionReleaseConstMeta;

  Future<String> mediatedConnectionInviteDetails(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionInviteDetailsConstMeta;

  Future<void> mediatedConnectionSendPing(
      {required int handle, String? comment, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSendPingConstMeta;

  Future<void> mediatedConnectionSendDiscoveryFeatures(
      {required int handle, String? query, String? comment, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionSendDiscoveryFeaturesConstMeta;

  Future<String> mediatedConnectionInfo({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionInfoConstMeta;

  Future<String> mediatedConnectionMessagesDownload(
      {required Uint32List connHandles,
      String? statusCodes,
      String? uids,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionMessagesDownloadConstMeta;

  Future<Uint8List> mediatedConnectionSignData(
      {required int handle, required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSignDataConstMeta;

  Future<bool> mediatedConnectionVerifySignature(
      {required int handle,
      required Uint8List data,
      required Uint8List signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionVerifySignatureConstMeta;
}

class MediatorConnectionImpl implements MediatorConnection {
  final MediatorConnectionPlatform _platform;
  factory MediatorConnectionImpl(ExternalLibrary dylib) =>
      MediatorConnectionImpl.raw(MediatorConnectionPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MediatorConnectionImpl.wasm(FutureOr<WasmModule> module) =>
      MediatorConnectionImpl(module as ExternalLibrary);
  MediatorConnectionImpl.raw(this._platform);
  Future<String> mediatedConnectionGeneratePublicInvite(
      {required String publicDid, required String label, dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicDid);
    var arg1 = _platform.api2wire_String(label);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_generate_public_invite(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionGeneratePublicInviteConstMeta,
      argValues: [publicDid, label],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionGeneratePublicInviteConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_generate_public_invite",
            argNames: ["publicDid", "label"],
          );

  Future<String> mediatedConnectionGetPwDid(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_get_pw_did(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionGetPwDidConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetPwDidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_get_pw_did",
        argNames: ["handle"],
      );

  Future<String> mediatedConnectionGetTheirPwDid(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_get_their_pw_did(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionGetTheirPwDidConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionGetTheirPwDidConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_get_their_pw_did",
            argNames: ["handle"],
          );

  Future<String> mediatedConnectionGetThreadId(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_get_thread_id(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionGetThreadIdConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetThreadIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_get_thread_id",
        argNames: ["handle"],
      );

  Future<int> mediatedConnectionGetState({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_get_state(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionGetStateConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_get_state",
        argNames: ["handle"],
      );

  Future<String> mediatedConnectionGetSourceId(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_get_source_id(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionGetSourceIdConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionGetSourceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_get_source_id",
        argNames: ["handle"],
      );

  Future<int> mediatedConnectionCreate(
      {required String sourceId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(sourceId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_create(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionCreateConstMeta,
      argValues: [sourceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionCreateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_create",
        argNames: ["sourceId"],
      );

  Future<int> mediatedConnectionCreateWithInvite(
      {required String sourceId, required String details, dynamic hint}) {
    var arg0 = _platform.api2wire_String(sourceId);
    var arg1 = _platform.api2wire_String(details);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_create_with_invite(port_, arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionCreateWithInviteConstMeta,
      argValues: [sourceId, details],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionCreateWithInviteConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_create_with_invite",
            argNames: ["sourceId", "details"],
          );

  Future<void> mediatedConnectionSendMessage(
      {required int handle, required String msg, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_String(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_send_message(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionSendMessageConstMeta,
      argValues: [handle, msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSendMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_send_message",
        argNames: ["handle", "msg"],
      );

  Future<int> mediatedConnectionCreateWithConnectionRequestV2(
      {required String request, required String pwInfo, dynamic hint}) {
    var arg0 = _platform.api2wire_String(request);
    var arg1 = _platform.api2wire_String(pwInfo);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_create_with_connection_request_v2(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionCreateWithConnectionRequestV2ConstMeta,
      argValues: [request, pwInfo],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionCreateWithConnectionRequestV2ConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_create_with_connection_request_v2",
            argNames: ["request", "pwInfo"],
          );

  Future<void> mediatedConnectionSendHandshakeReuse(
      {required int handle, required String oobMsg, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_String(oobMsg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_send_handshake_reuse(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionSendHandshakeReuseConstMeta,
      argValues: [handle, oobMsg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionSendHandshakeReuseConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_send_handshake_reuse",
            argNames: ["handle", "oobMsg"],
          );

  Future<int> mediatedConnectionUpdateStateWithMessage(
      {required int handle, required String message, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_update_state_with_message(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionUpdateStateWithMessageConstMeta,
      argValues: [handle, message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionUpdateStateWithMessageConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_update_state_with_message",
            argNames: ["handle", "message"],
          );

  Future<void> mediatedConnectionHandleMessage(
      {required int handle, required String message, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_handle_message(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionHandleMessageConstMeta,
      argValues: [handle, message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionHandleMessageConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_handle_message",
            argNames: ["handle", "message"],
          );

  Future<int> mediatedConnectionUpdateState(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_update_state(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionUpdateStateConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionUpdateStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_update_state",
        argNames: ["handle"],
      );

  Future<void> mediatedConnectionDeleteConnection(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_delete_connection(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionDeleteConnectionConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionDeleteConnectionConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_delete_connection",
            argNames: ["handle"],
          );

  Future<void> mediatedConnectionConnect({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_connect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionConnectConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionConnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_connect",
        argNames: ["handle"],
      );

  Future<String> mediatedConnectionSerialize(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_serialize(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionSerializeConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSerializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_serialize",
        argNames: ["handle"],
      );

  Future<int> mediatedConnectionDeserialize(
      {required String connectionData, dynamic hint}) {
    var arg0 = _platform.api2wire_String(connectionData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_deserialize(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kMediatedConnectionDeserializeConstMeta,
      argValues: [connectionData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionDeserializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_deserialize",
        argNames: ["connectionData"],
      );

  Future<void> mediatedConnectionRelease({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_release(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionReleaseConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionReleaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_release",
        argNames: ["handle"],
      );

  Future<String> mediatedConnectionInviteDetails(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_invite_details(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionInviteDetailsConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionInviteDetailsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_invite_details",
            argNames: ["handle"],
          );

  Future<void> mediatedConnectionSendPing(
      {required int handle, String? comment, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_opt_String(comment);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_send_ping(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionSendPingConstMeta,
      argValues: [handle, comment],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSendPingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_send_ping",
        argNames: ["handle", "comment"],
      );

  Future<void> mediatedConnectionSendDiscoveryFeatures(
      {required int handle, String? query, String? comment, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_opt_String(query);
    var arg2 = _platform.api2wire_opt_String(comment);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_send_discovery_features(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMediatedConnectionSendDiscoveryFeaturesConstMeta,
      argValues: [handle, query, comment],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionSendDiscoveryFeaturesConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_send_discovery_features",
            argNames: ["handle", "query", "comment"],
          );

  Future<String> mediatedConnectionInfo({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_info(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionInfoConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_info",
        argNames: ["handle"],
      );

  Future<String> mediatedConnectionMessagesDownload(
      {required Uint32List connHandles,
      String? statusCodes,
      String? uids,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_32_list(connHandles);
    var arg1 = _platform.api2wire_opt_String(statusCodes);
    var arg2 = _platform.api2wire_opt_String(uids);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_messages_download(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kMediatedConnectionMessagesDownloadConstMeta,
      argValues: [connHandles, statusCodes, uids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionMessagesDownloadConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_messages_download",
            argNames: ["connHandles", "statusCodes", "uids"],
          );

  Future<Uint8List> mediatedConnectionSignData(
      {required int handle, required Uint8List data, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mediated_connection_sign_data(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kMediatedConnectionSignDataConstMeta,
      argValues: [handle, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMediatedConnectionSignDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mediated_connection_sign_data",
        argNames: ["handle", "data"],
      );

  Future<bool> mediatedConnectionVerifySignature(
      {required int handle,
      required Uint8List data,
      required Uint8List signature,
      dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_uint_8_list(data);
    var arg2 = _platform.api2wire_uint_8_list(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_mediated_connection_verify_signature(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kMediatedConnectionVerifySignatureConstMeta,
      argValues: [handle, data, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMediatedConnectionVerifySignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "mediated_connection_verify_signature",
            argNames: ["handle", "data", "signature"],
          );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
