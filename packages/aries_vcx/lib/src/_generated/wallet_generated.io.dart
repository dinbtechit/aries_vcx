// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'wallet_generated.dart';
export 'wallet_generated.dart';
import 'dart:ffi' as ffi;

class WalletPlatform extends FlutterRustBridgeBase<WalletWire> {
  WalletPlatform(ffi.DynamicLibrary dylib) : super(WalletWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_IssuerConfig> api2wire_box_autoadd_issuer_config(
      IssuerConfig raw) {
    final ptr = inner.new_box_autoadd_issuer_config_18();
    _api_fill_to_wire_issuer_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RestoreWalletConfigs>
      api2wire_box_autoadd_restore_wallet_configs(RestoreWalletConfigs raw) {
    final ptr = inner.new_box_autoadd_restore_wallet_configs_18();
    _api_fill_to_wire_restore_wallet_configs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_WalletConfig> api2wire_box_autoadd_wallet_config(
      WalletConfig raw) {
    final ptr = inner.new_box_autoadd_wallet_config_18();
    _api_fill_to_wire_wallet_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_18(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_issuer_config(
      IssuerConfig apiObj, ffi.Pointer<wire_IssuerConfig> wireObj) {
    _api_fill_to_wire_issuer_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_restore_wallet_configs(
      RestoreWalletConfigs apiObj,
      ffi.Pointer<wire_RestoreWalletConfigs> wireObj) {
    _api_fill_to_wire_restore_wallet_configs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_wallet_config(
      WalletConfig apiObj, ffi.Pointer<wire_WalletConfig> wireObj) {
    _api_fill_to_wire_wallet_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_issuer_config(
      IssuerConfig apiObj, wire_IssuerConfig wireObj) {
    wireObj.institution_did = api2wire_String(apiObj.institutionDid);
  }

  void _api_fill_to_wire_restore_wallet_configs(
      RestoreWalletConfigs apiObj, wire_RestoreWalletConfigs wireObj) {
    wireObj.wallet_name = api2wire_String(apiObj.walletName);
    wireObj.wallet_key = api2wire_String(apiObj.walletKey);
    wireObj.exported_wallet_path = api2wire_String(apiObj.exportedWalletPath);
    wireObj.backup_key = api2wire_String(apiObj.backupKey);
    wireObj.wallet_key_derivation =
        api2wire_opt_String(apiObj.walletKeyDerivation);
  }

  void _api_fill_to_wire_wallet_config(
      WalletConfig apiObj, wire_WalletConfig wireObj) {
    wireObj.wallet_name = api2wire_String(apiObj.walletName);
    wireObj.wallet_key = api2wire_String(apiObj.walletKey);
    wireObj.wallet_key_derivation = api2wire_String(apiObj.walletKeyDerivation);
    wireObj.wallet_type = api2wire_opt_String(apiObj.walletType);
    wireObj.storage_config = api2wire_opt_String(apiObj.storageConfig);
    wireObj.storage_credentials =
        api2wire_opt_String(apiObj.storageCredentials);
    wireObj.rekey = api2wire_opt_String(apiObj.rekey);
    wireObj.rekey_derivation_method =
        api2wire_opt_String(apiObj.rekeyDerivationMethod);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class WalletWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WalletWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WalletWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_wallet_open_as_main(
    int port_,
    ffi.Pointer<wire_WalletConfig> wallet_config,
  ) {
    return _wire_wallet_open_as_main(
      port_,
      wallet_config,
    );
  }

  late final _wire_wallet_open_as_mainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_WalletConfig>)>>('wire_wallet_open_as_main');
  late final _wire_wallet_open_as_main = _wire_wallet_open_as_mainPtr
      .asFunction<void Function(int, ffi.Pointer<wire_WalletConfig>)>();

  void wire_wallet_create_main(
    int port_,
    ffi.Pointer<wire_WalletConfig> wallet_config,
  ) {
    return _wire_wallet_create_main(
      port_,
      wallet_config,
    );
  }

  late final _wire_wallet_create_mainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_WalletConfig>)>>('wire_wallet_create_main');
  late final _wire_wallet_create_main = _wire_wallet_create_mainPtr
      .asFunction<void Function(int, ffi.Pointer<wire_WalletConfig>)>();

  void wire_wallet_close_main(
    int port_,
  ) {
    return _wire_wallet_close_main(
      port_,
    );
  }

  late final _wire_wallet_close_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_wallet_close_main');
  late final _wire_wallet_close_main =
      _wire_wallet_close_mainPtr.asFunction<void Function(int)>();

  void wire_vcx_init_issuer_config(
    int port_,
    ffi.Pointer<wire_IssuerConfig> config,
  ) {
    return _wire_vcx_init_issuer_config(
      port_,
      config,
    );
  }

  late final _wire_vcx_init_issuer_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_IssuerConfig>)>>('wire_vcx_init_issuer_config');
  late final _wire_vcx_init_issuer_config = _wire_vcx_init_issuer_configPtr
      .asFunction<void Function(int, ffi.Pointer<wire_IssuerConfig>)>();

  void wire_configure_issuer_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> enterprise_seed,
  ) {
    return _wire_configure_issuer_wallet(
      port_,
      enterprise_seed,
    );
  }

  late final _wire_configure_issuer_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_configure_issuer_wallet');
  late final _wire_configure_issuer_wallet = _wire_configure_issuer_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unpack(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_unpack(
      port_,
      data,
    );
  }

  late final _wire_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_unpack');
  late final _wire_unpack = _wire_unpackPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_pairwise_info(
    int port_,
  ) {
    return _wire_create_pairwise_info(
      port_,
    );
  }

  late final _wire_create_pairwise_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_pairwise_info');
  late final _wire_create_pairwise_info =
      _wire_create_pairwise_infoPtr.asFunction<void Function(int)>();

  void wire_wallet_import(
    int port_,
    ffi.Pointer<wire_RestoreWalletConfigs> config,
  ) {
    return _wire_wallet_import(
      port_,
      config,
    );
  }

  late final _wire_wallet_importPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_RestoreWalletConfigs>)>>('wire_wallet_import');
  late final _wire_wallet_import = _wire_wallet_importPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RestoreWalletConfigs>)>();

  void wire_wallet_export(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> backup_key,
  ) {
    return _wire_wallet_export(
      port_,
      path,
      backup_key,
    );
  }

  late final _wire_wallet_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_wallet_export');
  late final _wire_wallet_export = _wire_wallet_exportPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_verkey_from_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
  ) {
    return _wire_get_verkey_from_wallet(
      port_,
      did,
    );
  }

  late final _wire_get_verkey_from_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_verkey_from_wallet');
  late final _wire_get_verkey_from_wallet = _wire_get_verkey_from_walletPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_rotate_verkey(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
  ) {
    return _wire_rotate_verkey(
      port_,
      did,
    );
  }

  late final _wire_rotate_verkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_rotate_verkey');
  late final _wire_rotate_verkey = _wire_rotate_verkeyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_rotate_verkey_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
  ) {
    return _wire_rotate_verkey_start(
      port_,
      did,
    );
  }

  late final _wire_rotate_verkey_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_rotate_verkey_start');
  late final _wire_rotate_verkey_start = _wire_rotate_verkey_startPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_rotate_verkey_apply(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
    ffi.Pointer<wire_uint_8_list> temp_vk,
  ) {
    return _wire_rotate_verkey_apply(
      port_,
      did,
      temp_vk,
    );
  }

  late final _wire_rotate_verkey_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_rotate_verkey_apply');
  late final _wire_rotate_verkey_apply =
      _wire_rotate_verkey_applyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_IssuerConfig> new_box_autoadd_issuer_config_18() {
    return _new_box_autoadd_issuer_config_18();
  }

  late final _new_box_autoadd_issuer_config_18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_IssuerConfig> Function()>>(
          'new_box_autoadd_issuer_config_18');
  late final _new_box_autoadd_issuer_config_18 =
      _new_box_autoadd_issuer_config_18Ptr
          .asFunction<ffi.Pointer<wire_IssuerConfig> Function()>();

  ffi.Pointer<wire_RestoreWalletConfigs>
      new_box_autoadd_restore_wallet_configs_18() {
    return _new_box_autoadd_restore_wallet_configs_18();
  }

  late final _new_box_autoadd_restore_wallet_configs_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RestoreWalletConfigs>
              Function()>>('new_box_autoadd_restore_wallet_configs_18');
  late final _new_box_autoadd_restore_wallet_configs_18 =
      _new_box_autoadd_restore_wallet_configs_18Ptr
          .asFunction<ffi.Pointer<wire_RestoreWalletConfigs> Function()>();

  ffi.Pointer<wire_WalletConfig> new_box_autoadd_wallet_config_18() {
    return _new_box_autoadd_wallet_config_18();
  }

  late final _new_box_autoadd_wallet_config_18Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_WalletConfig> Function()>>(
          'new_box_autoadd_wallet_config_18');
  late final _new_box_autoadd_wallet_config_18 =
      _new_box_autoadd_wallet_config_18Ptr
          .asFunction<ffi.Pointer<wire_WalletConfig> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_18(
    int len,
  ) {
    return _new_uint_8_list_18(
      len,
    );
  }

  late final _new_uint_8_list_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_18');
  late final _new_uint_8_list_18 = _new_uint_8_list_18Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<wire_RevocationRegistryConfig>
      new_box_autoadd_revocation_registry_config_13() {
    return _new_box_autoadd_revocation_registry_config_13();
  }

  late final _new_box_autoadd_revocation_registry_config_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_RevocationRegistryConfig>
              Function()>>('new_box_autoadd_revocation_registry_config_13');
  late final _new_box_autoadd_revocation_registry_config_13 =
      _new_box_autoadd_revocation_registry_config_13Ptr
          .asFunction<ffi.Pointer<wire_RevocationRegistryConfig> Function()>();

  ffi.Pointer<wire_PoolConfig> new_box_autoadd_pool_config_11() {
    return _new_box_autoadd_pool_config_11();
  }

  late final _new_box_autoadd_pool_config_11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PoolConfig> Function()>>(
          'new_box_autoadd_pool_config_11');
  late final _new_box_autoadd_pool_config_11 =
      _new_box_autoadd_pool_config_11Ptr
          .asFunction<ffi.Pointer<wire_PoolConfig> Function()>();

  ffi.Pointer<wire_AgencyClientConfig>
      new_box_autoadd_agency_client_config_0() {
    return _new_box_autoadd_agency_client_config_0();
  }

  late final _new_box_autoadd_agency_client_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_AgencyClientConfig> Function()>>(
      'new_box_autoadd_agency_client_config_0');
  late final _new_box_autoadd_agency_client_config_0 =
      _new_box_autoadd_agency_client_config_0Ptr
          .asFunction<ffi.Pointer<wire_AgencyClientConfig> Function()>();

  ffi.Pointer<wire_AgentProvisionConfig>
      new_box_autoadd_agent_provision_config_0() {
    return _new_box_autoadd_agent_provision_config_0();
  }

  late final _new_box_autoadd_agent_provision_config_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_AgentProvisionConfig>
              Function()>>('new_box_autoadd_agent_provision_config_0');
  late final _new_box_autoadd_agent_provision_config_0 =
      _new_box_autoadd_agent_provision_config_0Ptr
          .asFunction<ffi.Pointer<wire_AgentProvisionConfig> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_WalletConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> wallet_name;

  external ffi.Pointer<wire_uint_8_list> wallet_key;

  external ffi.Pointer<wire_uint_8_list> wallet_key_derivation;

  external ffi.Pointer<wire_uint_8_list> wallet_type;

  external ffi.Pointer<wire_uint_8_list> storage_config;

  external ffi.Pointer<wire_uint_8_list> storage_credentials;

  external ffi.Pointer<wire_uint_8_list> rekey;

  external ffi.Pointer<wire_uint_8_list> rekey_derivation_method;
}

class wire_IssuerConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> institution_did;
}

class wire_RestoreWalletConfigs extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> wallet_name;

  external ffi.Pointer<wire_uint_8_list> wallet_key;

  external ffi.Pointer<wire_uint_8_list> exported_wallet_path;

  external ffi.Pointer<wire_uint_8_list> backup_key;

  external ffi.Pointer<wire_uint_8_list> wallet_key_derivation;
}

class wire_RevocationRegistryConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> issuer_did;

  external ffi.Pointer<wire_uint_8_list> cred_def_id;

  @ffi.Uint32()
  external int tag;

  external ffi.Pointer<wire_uint_8_list> tails_dir;

  @ffi.Uint32()
  external int max_creds;
}

class wire_PoolConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> genesis_path;

  external ffi.Pointer<wire_uint_8_list> pool_name;

  external ffi.Pointer<wire_uint_8_list> pool_config;
}

class wire_AgencyClientConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> agency_did;

  external ffi.Pointer<wire_uint_8_list> agency_endpoint;

  external ffi.Pointer<wire_uint_8_list> agency_verkey;

  external ffi.Pointer<wire_uint_8_list> remote_to_sdk_did;

  external ffi.Pointer<wire_uint_8_list> remote_to_sdk_verkey;

  external ffi.Pointer<wire_uint_8_list> sdk_to_remote_did;

  external ffi.Pointer<wire_uint_8_list> sdk_to_remote_verkey;
}

class wire_AgentProvisionConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> agency_did;

  external ffi.Pointer<wire_uint_8_list> agency_verkey;

  external ffi.Pointer<wire_uint_8_list> agency_endpoint;

  external ffi.Pointer<wire_uint_8_list> agent_seed;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
