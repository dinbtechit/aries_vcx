// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'disclosed_proof_generated.io.dart'
    if (dart.library.html) 'disclosed_proof_generated.web.dart';

abstract class DisclosedProofFFI {
  Future<int> disclosedProofCreateWithRequest(
      {required String sourceId, required String proofReq, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofCreateWithRequestConstMeta;

  Future<void> disclosedProofRelease({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofReleaseConstMeta;

  Future<void> disclosedProofSendProof(
      {required int handle, required int handleConnection, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofSendProofConstMeta;

  Future<void> disclosedProofRejectProof(
      {required int handle, required int handleConnection, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofRejectProofConstMeta;

  Future<String> disclosedProofGetProofMsg({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetProofMsgConstMeta;

  Future<String> disclosedProofSerialize({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofSerializeConstMeta;

  Future<int> disclosedProofDeserialize({required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofDeserializeConstMeta;

  Future<int> v2DisclosedProofUpdateState(
      {required int handle, required int connectionHandle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kV2DisclosedProofUpdateStateConstMeta;

  Future<int> v2DisclosedProofUpdateStateWithMessage(
      {required int handle,
      required String message,
      required int connectionHandle,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kV2DisclosedProofUpdateStateWithMessageConstMeta;

  Future<int> disclosedProofGetState({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetStateConstMeta;

  Future<String> disclosedProofGetRequests(
      {required int handleConnection, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetRequestsConstMeta;

  Future<String> disclosedProofRetrieveCredentials(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofRetrieveCredentialsConstMeta;

  Future<String> disclosedProofGetProofRequestAttachment(
      {required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofGetProofRequestAttachmentConstMeta;

  Future<void> disclosedProofGenerateProof(
      {required int handle,
      required String credentials,
      required String selfAttestedAttrs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGenerateProofConstMeta;

  Future<void> disclosedProofDeclinePresentationRequest(
      {required int handle,
      required int connectionHandle,
      String? reason,
      String? proposal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofDeclinePresentationRequestConstMeta;

  Future<String> disclosedProofGetThreadId({required int handle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetThreadIdConstMeta;
}

class DisclosedProofFFIImpl implements DisclosedProofFFI {
  final DisclosedProofFFIPlatform _platform;
  factory DisclosedProofFFIImpl(ExternalLibrary dylib) =>
      DisclosedProofFFIImpl.raw(DisclosedProofFFIPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory DisclosedProofFFIImpl.wasm(FutureOr<WasmModule> module) =>
      DisclosedProofFFIImpl(module as ExternalLibrary);
  DisclosedProofFFIImpl.raw(this._platform);
  Future<int> disclosedProofCreateWithRequest(
      {required String sourceId, required String proofReq, dynamic hint}) {
    var arg0 = _platform.api2wire_String(sourceId);
    var arg1 = _platform.api2wire_String(proofReq);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_disclosed_proof_create_with_request(port_, arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kDisclosedProofCreateWithRequestConstMeta,
      argValues: [sourceId, proofReq],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofCreateWithRequestConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "disclosed_proof_create_with_request",
            argNames: ["sourceId", "proofReq"],
          );

  Future<void> disclosedProofRelease({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_release(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisclosedProofReleaseConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofReleaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_release",
        argNames: ["handle"],
      );

  Future<void> disclosedProofSendProof(
      {required int handle, required int handleConnection, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = api2wire_u32(handleConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_send_proof(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisclosedProofSendProofConstMeta,
      argValues: [handle, handleConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofSendProofConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_send_proof",
        argNames: ["handle", "handleConnection"],
      );

  Future<void> disclosedProofRejectProof(
      {required int handle, required int handleConnection, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = api2wire_u32(handleConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_reject_proof(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisclosedProofRejectProofConstMeta,
      argValues: [handle, handleConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofRejectProofConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_reject_proof",
        argNames: ["handle", "handleConnection"],
      );

  Future<String> disclosedProofGetProofMsg(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_get_proof_msg(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDisclosedProofGetProofMsgConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetProofMsgConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_get_proof_msg",
        argNames: ["handle"],
      );

  Future<String> disclosedProofSerialize({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_serialize(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDisclosedProofSerializeConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofSerializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_serialize",
        argNames: ["handle"],
      );

  Future<int> disclosedProofDeserialize({required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_deserialize(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kDisclosedProofDeserializeConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofDeserializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_deserialize",
        argNames: ["data"],
      );

  Future<int> v2DisclosedProofUpdateState(
      {required int handle, required int connectionHandle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = api2wire_u32(connectionHandle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_v2_disclosed_proof_update_state(port_, arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kV2DisclosedProofUpdateStateConstMeta,
      argValues: [handle, connectionHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kV2DisclosedProofUpdateStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "v2_disclosed_proof_update_state",
        argNames: ["handle", "connectionHandle"],
      );

  Future<int> v2DisclosedProofUpdateStateWithMessage(
      {required int handle,
      required String message,
      required int connectionHandle,
      dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_String(message);
    var arg2 = api2wire_u32(connectionHandle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_v2_disclosed_proof_update_state_with_message(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      constMeta: kV2DisclosedProofUpdateStateWithMessageConstMeta,
      argValues: [handle, message, connectionHandle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kV2DisclosedProofUpdateStateWithMessageConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "v2_disclosed_proof_update_state_with_message",
            argNames: ["handle", "message", "connectionHandle"],
          );

  Future<int> disclosedProofGetState({required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_get_state(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kDisclosedProofGetStateConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_get_state",
        argNames: ["handle"],
      );

  Future<String> disclosedProofGetRequests(
      {required int handleConnection, dynamic hint}) {
    var arg0 = api2wire_u32(handleConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_get_requests(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDisclosedProofGetRequestsConstMeta,
      argValues: [handleConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetRequestsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_get_requests",
        argNames: ["handleConnection"],
      );

  Future<String> disclosedProofRetrieveCredentials(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_disclosed_proof_retrieve_credentials(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDisclosedProofRetrieveCredentialsConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofRetrieveCredentialsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "disclosed_proof_retrieve_credentials",
            argNames: ["handle"],
          );

  Future<String> disclosedProofGetProofRequestAttachment(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_disclosed_proof_get_proof_request_attachment(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDisclosedProofGetProofRequestAttachmentConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofGetProofRequestAttachmentConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "disclosed_proof_get_proof_request_attachment",
            argNames: ["handle"],
          );

  Future<void> disclosedProofGenerateProof(
      {required int handle,
      required String credentials,
      required String selfAttestedAttrs,
      dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = _platform.api2wire_String(credentials);
    var arg2 = _platform.api2wire_String(selfAttestedAttrs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_disclosed_proof_generate_proof(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisclosedProofGenerateProofConstMeta,
      argValues: [handle, credentials, selfAttestedAttrs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGenerateProofConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_generate_proof",
        argNames: ["handle", "credentials", "selfAttestedAttrs"],
      );

  Future<void> disclosedProofDeclinePresentationRequest(
      {required int handle,
      required int connectionHandle,
      String? reason,
      String? proposal,
      dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    var arg1 = api2wire_u32(connectionHandle);
    var arg2 = _platform.api2wire_opt_String(reason);
    var arg3 = _platform.api2wire_opt_String(proposal);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_disclosed_proof_decline_presentation_request(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisclosedProofDeclinePresentationRequestConstMeta,
      argValues: [handle, connectionHandle, reason, proposal],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDisclosedProofDeclinePresentationRequestConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "disclosed_proof_decline_presentation_request",
            argNames: ["handle", "connectionHandle", "reason", "proposal"],
          );

  Future<String> disclosedProofGetThreadId(
      {required int handle, dynamic hint}) {
    var arg0 = api2wire_u32(handle);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_disclosed_proof_get_thread_id(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDisclosedProofGetThreadIdConstMeta,
      argValues: [handle],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisclosedProofGetThreadIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disclosed_proof_get_thread_id",
        argNames: ["handle"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
