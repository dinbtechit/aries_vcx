// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'schema_generated.io.dart'
    if (dart.library.html) 'schema_generated.web.dart';

abstract class Schema {
  Future<void> schemaGetAttributes(
      {required String sourceId, required String schemaId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaGetAttributesConstMeta;

  Future<void> schemaPrepareForEndorser({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaPrepareForEndorserConstMeta;

  Future<int> schemaCreate(
      {required String sourceId,
      required String name,
      required String version,
      required String data,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaCreateConstMeta;

  Future<String> schemaGetSchemaId({required int handleSchema, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaGetSchemaIdConstMeta;

  Future<int> schemaDeserialize({required String serialized, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaDeserializeConstMeta;

  Future<String> schemaSerialize({required int handleSchema, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaSerializeConstMeta;

  Future<void> schemaRelease({required int handleSchema, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaReleaseConstMeta;

  Future<int> schemaUpdateState({required int handleSchema, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaUpdateStateConstMeta;

  Future<int> schemaGetState({required int handleSchema, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaGetStateConstMeta;
}

class SchemaImpl implements Schema {
  final SchemaPlatform _platform;
  factory SchemaImpl(ExternalLibrary dylib) =>
      SchemaImpl.raw(SchemaPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory SchemaImpl.wasm(FutureOr<WasmModule> module) =>
      SchemaImpl(module as ExternalLibrary);
  SchemaImpl.raw(this._platform);
  Future<void> schemaGetAttributes(
      {required String sourceId, required String schemaId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(sourceId);
    var arg1 = _platform.api2wire_String(schemaId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_schema_get_attributes(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSchemaGetAttributesConstMeta,
      argValues: [sourceId, schemaId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaGetAttributesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_get_attributes",
        argNames: ["sourceId", "schemaId"],
      );

  Future<void> schemaPrepareForEndorser({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_schema_prepare_for_endorser(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSchemaPrepareForEndorserConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaPrepareForEndorserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_prepare_for_endorser",
        argNames: [],
      );

  Future<int> schemaCreate(
      {required String sourceId,
      required String name,
      required String version,
      required String data,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(sourceId);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_String(version);
    var arg3 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_schema_create(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_u32,
      constMeta: kSchemaCreateConstMeta,
      argValues: [sourceId, name, version, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaCreateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_create",
        argNames: ["sourceId", "name", "version", "data"],
      );

  Future<String> schemaGetSchemaId({required int handleSchema, dynamic hint}) {
    var arg0 = api2wire_u32(handleSchema);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_schema_get_schema_id(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSchemaGetSchemaIdConstMeta,
      argValues: [handleSchema],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaGetSchemaIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_get_schema_id",
        argNames: ["handleSchema"],
      );

  Future<int> schemaDeserialize({required String serialized, dynamic hint}) {
    var arg0 = _platform.api2wire_String(serialized);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schema_deserialize(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kSchemaDeserializeConstMeta,
      argValues: [serialized],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaDeserializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_deserialize",
        argNames: ["serialized"],
      );

  Future<String> schemaSerialize({required int handleSchema, dynamic hint}) {
    var arg0 = api2wire_u32(handleSchema);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schema_serialize(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSchemaSerializeConstMeta,
      argValues: [handleSchema],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaSerializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_serialize",
        argNames: ["handleSchema"],
      );

  Future<void> schemaRelease({required int handleSchema, dynamic hint}) {
    var arg0 = api2wire_u32(handleSchema);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schema_release(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSchemaReleaseConstMeta,
      argValues: [handleSchema],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaReleaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_release",
        argNames: ["handleSchema"],
      );

  Future<int> schemaUpdateState({required int handleSchema, dynamic hint}) {
    var arg0 = api2wire_u32(handleSchema);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schema_update_state(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kSchemaUpdateStateConstMeta,
      argValues: [handleSchema],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaUpdateStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_update_state",
        argNames: ["handleSchema"],
      );

  Future<int> schemaGetState({required int handleSchema, dynamic hint}) {
    var arg0 = api2wire_u32(handleSchema);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_schema_get_state(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kSchemaGetStateConstMeta,
      argValues: [handleSchema],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaGetStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema_get_state",
        argNames: ["handleSchema"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
