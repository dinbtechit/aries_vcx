// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'wallet_generated.dart';
export 'wallet_generated.dart';

class WalletPlatform extends FlutterRustBridgeBase<WalletWire>
    with FlutterRustBridgeSetupMixin {
  WalletPlatform(FutureOr<WasmModule> dylib) : super(WalletWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_issuer_config(IssuerConfig raw) {
    return api2wire_issuer_config(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_restore_wallet_configs(
      RestoreWalletConfigs raw) {
    return api2wire_restore_wallet_configs(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_wallet_config(WalletConfig raw) {
    return api2wire_wallet_config(raw);
  }

  @protected
  List<dynamic> api2wire_issuer_config(IssuerConfig raw) {
    return [api2wire_String(raw.institutionDid)];
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  List<dynamic> api2wire_restore_wallet_configs(RestoreWalletConfigs raw) {
    return [
      api2wire_String(raw.walletName),
      api2wire_String(raw.walletKey),
      api2wire_String(raw.exportedWalletPath),
      api2wire_String(raw.backupKey),
      api2wire_opt_String(raw.walletKeyDerivation)
    ];
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_wallet_config(WalletConfig raw) {
    return [
      api2wire_String(raw.walletName),
      api2wire_String(raw.walletKey),
      api2wire_String(raw.walletKeyDerivation),
      api2wire_opt_String(raw.walletType),
      api2wire_opt_String(raw.storageConfig),
      api2wire_opt_String(raw.storageCredentials),
      api2wire_opt_String(raw.rekey),
      api2wire_opt_String(raw.rekeyDerivationMethod)
    ];
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external WalletWasmModule get wasmModule;

@JS()
@anonymous
class WalletWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external WalletWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_wallet_open_as_main(
      NativePortType port_, List<dynamic> wallet_config);

  external dynamic /* void */ wire_wallet_create_main(
      NativePortType port_, List<dynamic> wallet_config);

  external dynamic /* void */ wire_wallet_close_main(NativePortType port_);

  external dynamic /* void */ wire_vcx_init_issuer_config(
      NativePortType port_, List<dynamic> config);

  external dynamic /* void */ wire_configure_issuer_wallet(
      NativePortType port_, String enterprise_seed);

  external dynamic /* void */ wire_unpack(NativePortType port_, Uint8List data);

  external dynamic /* void */ wire_create_pairwise_info(NativePortType port_);

  external dynamic /* void */ wire_wallet_import(
      NativePortType port_, List<dynamic> config);

  external dynamic /* void */ wire_wallet_export(
      NativePortType port_, String path, String backup_key);

  external dynamic /* void */ wire_get_verkey_from_wallet(
      NativePortType port_, String did);

  external dynamic /* void */ wire_rotate_verkey(
      NativePortType port_, String did);

  external dynamic /* void */ wire_rotate_verkey_start(
      NativePortType port_, String did);

  external dynamic /* void */ wire_rotate_verkey_apply(
      NativePortType port_, String did, String temp_vk);
}

// Section: WASM wire connector

class WalletWire extends FlutterRustBridgeWasmWireBase<WalletWasmModule> {
  WalletWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<WalletWasmModule>(module));

  void wire_wallet_open_as_main(
          NativePortType port_, List<dynamic> wallet_config) =>
      wasmModule.wire_wallet_open_as_main(port_, wallet_config);

  void wire_wallet_create_main(
          NativePortType port_, List<dynamic> wallet_config) =>
      wasmModule.wire_wallet_create_main(port_, wallet_config);

  void wire_wallet_close_main(NativePortType port_) =>
      wasmModule.wire_wallet_close_main(port_);

  void wire_vcx_init_issuer_config(
          NativePortType port_, List<dynamic> config) =>
      wasmModule.wire_vcx_init_issuer_config(port_, config);

  void wire_configure_issuer_wallet(
          NativePortType port_, String enterprise_seed) =>
      wasmModule.wire_configure_issuer_wallet(port_, enterprise_seed);

  void wire_unpack(NativePortType port_, Uint8List data) =>
      wasmModule.wire_unpack(port_, data);

  void wire_create_pairwise_info(NativePortType port_) =>
      wasmModule.wire_create_pairwise_info(port_);

  void wire_wallet_import(NativePortType port_, List<dynamic> config) =>
      wasmModule.wire_wallet_import(port_, config);

  void wire_wallet_export(
          NativePortType port_, String path, String backup_key) =>
      wasmModule.wire_wallet_export(port_, path, backup_key);

  void wire_get_verkey_from_wallet(NativePortType port_, String did) =>
      wasmModule.wire_get_verkey_from_wallet(port_, did);

  void wire_rotate_verkey(NativePortType port_, String did) =>
      wasmModule.wire_rotate_verkey(port_, did);

  void wire_rotate_verkey_start(NativePortType port_, String did) =>
      wasmModule.wire_rotate_verkey_start(port_, did);

  void wire_rotate_verkey_apply(
          NativePortType port_, String did, String temp_vk) =>
      wasmModule.wire_rotate_verkey_apply(port_, did, temp_vk);
}
