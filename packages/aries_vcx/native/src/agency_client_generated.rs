#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.67.0.

use crate::agency_client::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_update_webhook_url_impl(
    port_: MessagePort,
    webhook_url: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_webhook_url",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_webhook_url = webhook_url.wire2api();
            move |task_callback| update_webhook_url(api_webhook_url)
        },
    )
}
fn wire_create_agency_client_for_main_wallet_impl(
    port_: MessagePort,
    config: impl Wire2Api<AgencyClientConfig> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_agency_client_for_main_wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_config = config.wire2api();
            move |task_callback| create_agency_client_for_main_wallet(api_config)
        },
    )
}
fn wire_provision_cloud_agent_impl(
    port_: MessagePort,
    config: impl Wire2Api<AgentProvisionConfig> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "provision_cloud_agent",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_config = config.wire2api();
            move |task_callback| {
                Ok(mirror_AgencyClientConfig(provision_cloud_agent(
                    api_config,
                )?))
            }
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_AgencyClientConfig(AgencyClientConfig);

// Section: static checks

const _: fn() = || {
    let AgencyClientConfig = None::<AgencyClientConfig>.unwrap();
    let _: String = AgencyClientConfig.agency_did;
    let _: String = AgencyClientConfig.agency_endpoint;
    let _: String = AgencyClientConfig.agency_verkey;
    let _: String = AgencyClientConfig.remote_to_sdk_did;
    let _: String = AgencyClientConfig.remote_to_sdk_verkey;
    let _: String = AgencyClientConfig.sdk_to_remote_did;
    let _: String = AgencyClientConfig.sdk_to_remote_verkey;
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_AgencyClientConfig {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.agency_did.into_dart(),
            self.0.agency_endpoint.into_dart(),
            self.0.agency_verkey.into_dart(),
            self.0.remote_to_sdk_did.into_dart(),
            self.0.remote_to_sdk_verkey.into_dart(),
            self.0.sdk_to_remote_did.into_dart(),
            self.0.sdk_to_remote_verkey.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_AgencyClientConfig {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_update_webhook_url(port_: MessagePort, webhook_url: String) {
        wire_update_webhook_url_impl(port_, webhook_url)
    }

    #[wasm_bindgen]
    pub fn wire_create_agency_client_for_main_wallet(port_: MessagePort, config: JsValue) {
        wire_create_agency_client_for_main_wallet_impl(port_, config)
    }

    #[wasm_bindgen]
    pub fn wire_provision_cloud_agent(port_: MessagePort, config: JsValue) {
        wire_provision_cloud_agent_impl(port_, config)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<AgencyClientConfig> for JsValue {
        fn wire2api(self) -> AgencyClientConfig {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                7,
                "Expected 7 elements, got {}",
                self_.length()
            );
            AgencyClientConfig {
                agency_did: self_.get(0).wire2api(),
                agency_endpoint: self_.get(1).wire2api(),
                agency_verkey: self_.get(2).wire2api(),
                remote_to_sdk_did: self_.get(3).wire2api(),
                remote_to_sdk_verkey: self_.get(4).wire2api(),
                sdk_to_remote_did: self_.get(5).wire2api(),
                sdk_to_remote_verkey: self_.get(6).wire2api(),
            }
        }
    }
    impl Wire2Api<AgentProvisionConfig> for JsValue {
        fn wire2api(self) -> AgentProvisionConfig {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            AgentProvisionConfig {
                agency_did: self_.get(0).wire2api(),
                agency_verkey: self_.get(1).wire2api(),
                agency_endpoint: self_.get(2).wire2api(),
                agent_seed: self_.get(3).wire2api(),
            }
        }
    }

    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<Option<String>> for JsValue {
        fn wire2api(self) -> Option<String> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_update_webhook_url(port_: i64, webhook_url: *mut wire_uint_8_list) {
        wire_update_webhook_url_impl(port_, webhook_url)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_agency_client_for_main_wallet(
        port_: i64,
        config: *mut wire_AgencyClientConfig,
    ) {
        wire_create_agency_client_for_main_wallet_impl(port_, config)
    }

    #[no_mangle]
    pub extern "C" fn wire_provision_cloud_agent(
        port_: i64,
        config: *mut wire_AgentProvisionConfig,
    ) {
        wire_provision_cloud_agent_impl(port_, config)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_agency_client_config_0() -> *mut wire_AgencyClientConfig {
        support::new_leak_box_ptr(wire_AgencyClientConfig::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_agent_provision_config_0() -> *mut wire_AgentProvisionConfig {
        support::new_leak_box_ptr(wire_AgentProvisionConfig::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<AgencyClientConfig> for wire_AgencyClientConfig {
        fn wire2api(self) -> AgencyClientConfig {
            AgencyClientConfig {
                agency_did: self.agency_did.wire2api(),
                agency_endpoint: self.agency_endpoint.wire2api(),
                agency_verkey: self.agency_verkey.wire2api(),
                remote_to_sdk_did: self.remote_to_sdk_did.wire2api(),
                remote_to_sdk_verkey: self.remote_to_sdk_verkey.wire2api(),
                sdk_to_remote_did: self.sdk_to_remote_did.wire2api(),
                sdk_to_remote_verkey: self.sdk_to_remote_verkey.wire2api(),
            }
        }
    }
    impl Wire2Api<AgentProvisionConfig> for wire_AgentProvisionConfig {
        fn wire2api(self) -> AgentProvisionConfig {
            AgentProvisionConfig {
                agency_did: self.agency_did.wire2api(),
                agency_verkey: self.agency_verkey.wire2api(),
                agency_endpoint: self.agency_endpoint.wire2api(),
                agent_seed: self.agent_seed.wire2api(),
            }
        }
    }
    impl Wire2Api<AgencyClientConfig> for *mut wire_AgencyClientConfig {
        fn wire2api(self) -> AgencyClientConfig {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AgencyClientConfig>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<AgentProvisionConfig> for *mut wire_AgentProvisionConfig {
        fn wire2api(self) -> AgentProvisionConfig {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AgentProvisionConfig>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AgencyClientConfig {
        agency_did: *mut wire_uint_8_list,
        agency_endpoint: *mut wire_uint_8_list,
        agency_verkey: *mut wire_uint_8_list,
        remote_to_sdk_did: *mut wire_uint_8_list,
        remote_to_sdk_verkey: *mut wire_uint_8_list,
        sdk_to_remote_did: *mut wire_uint_8_list,
        sdk_to_remote_verkey: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AgentProvisionConfig {
        agency_did: *mut wire_uint_8_list,
        agency_verkey: *mut wire_uint_8_list,
        agency_endpoint: *mut wire_uint_8_list,
        agent_seed: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_AgencyClientConfig {
        fn new_with_null_ptr() -> Self {
            Self {
                agency_did: core::ptr::null_mut(),
                agency_endpoint: core::ptr::null_mut(),
                agency_verkey: core::ptr::null_mut(),
                remote_to_sdk_did: core::ptr::null_mut(),
                remote_to_sdk_verkey: core::ptr::null_mut(),
                sdk_to_remote_did: core::ptr::null_mut(),
                sdk_to_remote_verkey: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AgencyClientConfig {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AgentProvisionConfig {
        fn new_with_null_ptr() -> Self {
            Self {
                agency_did: core::ptr::null_mut(),
                agency_verkey: core::ptr::null_mut(),
                agency_endpoint: core::ptr::null_mut(),
                agent_seed: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AgentProvisionConfig {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
