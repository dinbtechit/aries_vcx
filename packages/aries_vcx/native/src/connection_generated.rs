#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.

use crate::connection::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_connection_create_inviter_impl(
    port_: MessagePort,
    pw_info: impl Wire2Api<Option<PairwiseInfo>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_create_inviter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pw_info = pw_info.wire2api();
            move |task_callback| connection_create_inviter(api_pw_info)
        },
    )
}
fn wire_connection_create_invitee_impl(
    port_: MessagePort,
    invitation: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_create_invitee",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_invitation = invitation.wire2api();
            move |task_callback| connection_create_invitee(api_invitation)
        },
    )
}
fn wire_connection_get_thread_id_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_get_thread_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_get_thread_id(api_handle)
        },
    )
}
fn wire_connection_get_pairwise_info_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_get_pairwise_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_get_pairwise_info(api_handle)
        },
    )
}
fn wire_connection_get_remote_did_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_get_remote_did",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_get_remote_did(api_handle)
        },
    )
}
fn wire_connection_get_remote_vk_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_get_remote_vk",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_get_remote_vk(api_handle)
        },
    )
}
fn wire_connection_get_state_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_get_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_get_state(api_handle)
        },
    )
}
fn wire_connection_get_invitation_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_get_invitation",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_get_invitation(api_handle)
        },
    )
}
fn wire_connection_process_invite_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    invitation: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_process_invite",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_invitation = invitation.wire2api();
            move |task_callback| connection_process_invite(api_handle, api_invitation)
        },
    )
}
fn wire_connection_process_request_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    request: impl Wire2Api<String> + UnwindSafe,
    service_endpoint: impl Wire2Api<String> + UnwindSafe,
    routing_keys: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_process_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_request = request.wire2api();
            let api_service_endpoint = service_endpoint.wire2api();
            let api_routing_keys = routing_keys.wire2api();
            move |task_callback| {
                connection_process_request(
                    api_handle,
                    api_request,
                    api_service_endpoint,
                    api_routing_keys,
                )
            }
        },
    )
}
fn wire_connection_process_response_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    response: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_process_response",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_response = response.wire2api();
            move |task_callback| connection_process_response(api_handle, api_response)
        },
    )
}
fn wire_connection_process_ack_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_process_ack",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_message = message.wire2api();
            move |task_callback| connection_process_ack(api_handle, api_message)
        },
    )
}
fn wire_connection_process_problem_report_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    problem_report: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_process_problem_report",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_problem_report = problem_report.wire2api();
            move |task_callback| connection_process_problem_report(api_handle, api_problem_report)
        },
    )
}
fn wire_connection_send_response_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_send_response",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_send_response(api_handle)
        },
    )
}
fn wire_connection_send_request_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    service_endpoint: impl Wire2Api<String> + UnwindSafe,
    routing_keys: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_send_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_service_endpoint = service_endpoint.wire2api();
            let api_routing_keys = routing_keys.wire2api();
            move |task_callback| {
                connection_send_request(api_handle, api_service_endpoint, api_routing_keys)
            }
        },
    )
}
fn wire_connection_send_ack_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_send_ack",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_send_ack(api_handle)
        },
    )
}
fn wire_connection_send_generic_message_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    content: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_send_generic_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_content = content.wire2api();
            move |task_callback| connection_send_generic_message(api_handle, api_content)
        },
    )
}
fn wire_connection_send_aries_message_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    content: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_send_aries_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_content = content.wire2api();
            move |task_callback| connection_send_aries_message(api_handle, api_content)
        },
    )
}
fn wire_connection_create_invite_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    service_endpoint: impl Wire2Api<String> + UnwindSafe,
    routing_keys: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_create_invite",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_service_endpoint = service_endpoint.wire2api();
            let api_routing_keys = routing_keys.wire2api();
            move |task_callback| {
                connection_create_invite(api_handle, api_service_endpoint, api_routing_keys)
            }
        },
    )
}
fn wire_connection_serialize_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_serialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_serialize(api_handle)
        },
    )
}
fn wire_connection_deserialize_impl(
    port_: MessagePort,
    connection_data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_deserialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_connection_data = connection_data.wire2api();
            move |task_callback| connection_deserialize(api_connection_data)
        },
    )
}
fn wire_connection_release_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connection_release",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| connection_release(api_handle)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_connection_create_inviter(port_: MessagePort, pw_info: JsValue) {
        wire_connection_create_inviter_impl(port_, pw_info)
    }

    #[wasm_bindgen]
    pub fn wire_connection_create_invitee(port_: MessagePort, invitation: String) {
        wire_connection_create_invitee_impl(port_, invitation)
    }

    #[wasm_bindgen]
    pub fn wire_connection_get_thread_id(port_: MessagePort, handle: u32) {
        wire_connection_get_thread_id_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_get_pairwise_info(port_: MessagePort, handle: u32) {
        wire_connection_get_pairwise_info_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_get_remote_did(port_: MessagePort, handle: u32) {
        wire_connection_get_remote_did_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_get_remote_vk(port_: MessagePort, handle: u32) {
        wire_connection_get_remote_vk_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_get_state(port_: MessagePort, handle: u32) {
        wire_connection_get_state_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_get_invitation(port_: MessagePort, handle: u32) {
        wire_connection_get_invitation_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_process_invite(port_: MessagePort, handle: u32, invitation: String) {
        wire_connection_process_invite_impl(port_, handle, invitation)
    }

    #[wasm_bindgen]
    pub fn wire_connection_process_request(
        port_: MessagePort,
        handle: u32,
        request: String,
        service_endpoint: String,
        routing_keys: JsValue,
    ) {
        wire_connection_process_request_impl(port_, handle, request, service_endpoint, routing_keys)
    }

    #[wasm_bindgen]
    pub fn wire_connection_process_response(port_: MessagePort, handle: u32, response: String) {
        wire_connection_process_response_impl(port_, handle, response)
    }

    #[wasm_bindgen]
    pub fn wire_connection_process_ack(port_: MessagePort, handle: u32, message: String) {
        wire_connection_process_ack_impl(port_, handle, message)
    }

    #[wasm_bindgen]
    pub fn wire_connection_process_problem_report(
        port_: MessagePort,
        handle: u32,
        problem_report: String,
    ) {
        wire_connection_process_problem_report_impl(port_, handle, problem_report)
    }

    #[wasm_bindgen]
    pub fn wire_connection_send_response(port_: MessagePort, handle: u32) {
        wire_connection_send_response_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_send_request(
        port_: MessagePort,
        handle: u32,
        service_endpoint: String,
        routing_keys: JsValue,
    ) {
        wire_connection_send_request_impl(port_, handle, service_endpoint, routing_keys)
    }

    #[wasm_bindgen]
    pub fn wire_connection_send_ack(port_: MessagePort, handle: u32) {
        wire_connection_send_ack_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_send_generic_message(port_: MessagePort, handle: u32, content: String) {
        wire_connection_send_generic_message_impl(port_, handle, content)
    }

    #[wasm_bindgen]
    pub fn wire_connection_send_aries_message(port_: MessagePort, handle: u32, content: String) {
        wire_connection_send_aries_message_impl(port_, handle, content)
    }

    #[wasm_bindgen]
    pub fn wire_connection_create_invite(
        port_: MessagePort,
        handle: u32,
        service_endpoint: String,
        routing_keys: JsValue,
    ) {
        wire_connection_create_invite_impl(port_, handle, service_endpoint, routing_keys)
    }

    #[wasm_bindgen]
    pub fn wire_connection_serialize(port_: MessagePort, handle: u32) {
        wire_connection_serialize_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_connection_deserialize(port_: MessagePort, connection_data: String) {
        wire_connection_deserialize_impl(port_, connection_data)
    }

    #[wasm_bindgen]
    pub fn wire_connection_release(port_: MessagePort, handle: u32) {
        wire_connection_release_impl(port_, handle)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Vec<String>> for JsValue {
        fn wire2api(self) -> Vec<String> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<Option<PairwiseInfo>> for JsValue {
        fn wire2api(self) -> Option<PairwiseInfo> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<PairwiseInfo> for JsValue {
        fn wire2api(self) -> PairwiseInfo {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            PairwiseInfo {
                pw_did: self_.get(0).wire2api(),
                pw_vk: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_connection_create_inviter(port_: i64, pw_info: *mut wire_PairwiseInfo) {
        wire_connection_create_inviter_impl(port_, pw_info)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_create_invitee(
        port_: i64,
        invitation: *mut wire_uint_8_list,
    ) {
        wire_connection_create_invitee_impl(port_, invitation)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_get_thread_id(port_: i64, handle: u32) {
        wire_connection_get_thread_id_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_get_pairwise_info(port_: i64, handle: u32) {
        wire_connection_get_pairwise_info_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_get_remote_did(port_: i64, handle: u32) {
        wire_connection_get_remote_did_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_get_remote_vk(port_: i64, handle: u32) {
        wire_connection_get_remote_vk_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_get_state(port_: i64, handle: u32) {
        wire_connection_get_state_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_get_invitation(port_: i64, handle: u32) {
        wire_connection_get_invitation_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_process_invite(
        port_: i64,
        handle: u32,
        invitation: *mut wire_uint_8_list,
    ) {
        wire_connection_process_invite_impl(port_, handle, invitation)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_process_request(
        port_: i64,
        handle: u32,
        request: *mut wire_uint_8_list,
        service_endpoint: *mut wire_uint_8_list,
        routing_keys: *mut wire_StringList,
    ) {
        wire_connection_process_request_impl(port_, handle, request, service_endpoint, routing_keys)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_process_response(
        port_: i64,
        handle: u32,
        response: *mut wire_uint_8_list,
    ) {
        wire_connection_process_response_impl(port_, handle, response)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_process_ack(
        port_: i64,
        handle: u32,
        message: *mut wire_uint_8_list,
    ) {
        wire_connection_process_ack_impl(port_, handle, message)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_process_problem_report(
        port_: i64,
        handle: u32,
        problem_report: *mut wire_uint_8_list,
    ) {
        wire_connection_process_problem_report_impl(port_, handle, problem_report)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_send_response(port_: i64, handle: u32) {
        wire_connection_send_response_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_send_request(
        port_: i64,
        handle: u32,
        service_endpoint: *mut wire_uint_8_list,
        routing_keys: *mut wire_StringList,
    ) {
        wire_connection_send_request_impl(port_, handle, service_endpoint, routing_keys)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_send_ack(port_: i64, handle: u32) {
        wire_connection_send_ack_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_send_generic_message(
        port_: i64,
        handle: u32,
        content: *mut wire_uint_8_list,
    ) {
        wire_connection_send_generic_message_impl(port_, handle, content)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_send_aries_message(
        port_: i64,
        handle: u32,
        content: *mut wire_uint_8_list,
    ) {
        wire_connection_send_aries_message_impl(port_, handle, content)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_create_invite(
        port_: i64,
        handle: u32,
        service_endpoint: *mut wire_uint_8_list,
        routing_keys: *mut wire_StringList,
    ) {
        wire_connection_create_invite_impl(port_, handle, service_endpoint, routing_keys)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_serialize(port_: i64, handle: u32) {
        wire_connection_serialize_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_deserialize(
        port_: i64,
        connection_data: *mut wire_uint_8_list,
    ) {
        wire_connection_deserialize_impl(port_, connection_data)
    }

    #[no_mangle]
    pub extern "C" fn wire_connection_release(port_: i64, handle: u32) {
        wire_connection_release_impl(port_, handle)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_StringList_2(len: i32) -> *mut wire_StringList {
        let wrap = wire_StringList {
            ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_pairwise_info_2() -> *mut wire_PairwiseInfo {
        support::new_leak_box_ptr(wire_PairwiseInfo::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_2(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Vec<String>> for *mut wire_StringList {
        fn wire2api(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<PairwiseInfo> for *mut wire_PairwiseInfo {
        fn wire2api(self) -> PairwiseInfo {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<PairwiseInfo>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<PairwiseInfo> for wire_PairwiseInfo {
        fn wire2api(self) -> PairwiseInfo {
            PairwiseInfo {
                pw_did: self.pw_did.wire2api(),
                pw_vk: self.pw_vk.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_StringList {
        ptr: *mut *mut wire_uint_8_list,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_PairwiseInfo {
        pw_did: *mut wire_uint_8_list,
        pw_vk: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_PairwiseInfo {
        fn new_with_null_ptr() -> Self {
            Self {
                pw_did: core::ptr::null_mut(),
                pw_vk: core::ptr::null_mut(),
            }
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
