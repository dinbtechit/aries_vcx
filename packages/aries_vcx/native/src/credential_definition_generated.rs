#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.67.0.

use crate::credential_definition::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_credentialdef_create_v2__impl(
    port_: MessagePort,
    source_id: impl Wire2Api<String> + UnwindSafe,
    schema_id: impl Wire2Api<String> + UnwindSafe,
    tag: impl Wire2Api<String> + UnwindSafe,
    support_revocation: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_create_v2_",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_source_id = source_id.wire2api();
            let api_schema_id = schema_id.wire2api();
            let api_tag = tag.wire2api();
            let api_support_revocation = support_revocation.wire2api();
            move |task_callback| {
                credentialdef_create_v2_(
                    api_source_id,
                    api_schema_id,
                    api_tag,
                    api_support_revocation,
                )
            }
        },
    )
}
fn wire_credentialdef_publish_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_publish",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| credentialdef_publish(api_handle)
        },
    )
}
fn wire_credentialdef_deserialize_impl(
    port_: MessagePort,
    serialized: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_deserialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_serialized = serialized.wire2api();
            move |task_callback| credentialdef_deserialize(api_serialized)
        },
    )
}
fn wire_credentialdef_release_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_release",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| credentialdef_release(api_handle)
        },
    )
}
fn wire_credentialdef_serialize_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_serialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| credentialdef_serialize(api_handle)
        },
    )
}
fn wire_credentialdef_get_cred_def_id_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_get_cred_def_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| credentialdef_get_cred_def_id(api_handle)
        },
    )
}
fn wire_credentialdef_update_state_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_update_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| credentialdef_update_state(api_handle)
        },
    )
}
fn wire_credentialdef_get_state_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "credentialdef_get_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| credentialdef_get_state(api_handle)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_credentialdef_create_v2_(
        port_: MessagePort,
        source_id: String,
        schema_id: String,
        tag: String,
        support_revocation: bool,
    ) {
        wire_credentialdef_create_v2__impl(port_, source_id, schema_id, tag, support_revocation)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_publish(port_: MessagePort, handle: u32) {
        wire_credentialdef_publish_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_deserialize(port_: MessagePort, serialized: String) {
        wire_credentialdef_deserialize_impl(port_, serialized)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_release(port_: MessagePort, handle: u32) {
        wire_credentialdef_release_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_serialize(port_: MessagePort, handle: u32) {
        wire_credentialdef_serialize_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_get_cred_def_id(port_: MessagePort, handle: u32) {
        wire_credentialdef_get_cred_def_id_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_update_state(port_: MessagePort, handle: u32) {
        wire_credentialdef_update_state_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_credentialdef_get_state(port_: MessagePort, handle: u32) {
        wire_credentialdef_get_state_impl(port_, handle)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<bool> for JsValue {
        fn wire2api(self) -> bool {
            self.is_truthy()
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_create_v2_(
        port_: i64,
        source_id: *mut wire_uint_8_list,
        schema_id: *mut wire_uint_8_list,
        tag: *mut wire_uint_8_list,
        support_revocation: bool,
    ) {
        wire_credentialdef_create_v2__impl(port_, source_id, schema_id, tag, support_revocation)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_publish(port_: i64, handle: u32) {
        wire_credentialdef_publish_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_deserialize(
        port_: i64,
        serialized: *mut wire_uint_8_list,
    ) {
        wire_credentialdef_deserialize_impl(port_, serialized)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_release(port_: i64, handle: u32) {
        wire_credentialdef_release_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_serialize(port_: i64, handle: u32) {
        wire_credentialdef_serialize_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_get_cred_def_id(port_: i64, handle: u32) {
        wire_credentialdef_get_cred_def_id_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_update_state(port_: i64, handle: u32) {
        wire_credentialdef_update_state_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_credentialdef_get_state(port_: i64, handle: u32) {
        wire_credentialdef_get_state_impl(port_, handle)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_3(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
