#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.67.0.

use crate::disclosed_proof::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_disclosed_proof_create_with_request_impl(
    port_: MessagePort,
    source_id: impl Wire2Api<String> + UnwindSafe,
    proof_req: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_create_with_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_source_id = source_id.wire2api();
            let api_proof_req = proof_req.wire2api();
            move |task_callback| disclosed_proof_create_with_request(api_source_id, api_proof_req)
        },
    )
}
fn wire_disclosed_proof_release_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_release",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_release(api_handle)
        },
    )
}
fn wire_disclosed_proof_send_proof_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    handle_connection: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_send_proof",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_handle_connection = handle_connection.wire2api();
            move |task_callback| disclosed_proof_send_proof(api_handle, api_handle_connection)
        },
    )
}
fn wire_disclosed_proof_reject_proof_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    handle_connection: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_reject_proof",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_handle_connection = handle_connection.wire2api();
            move |task_callback| disclosed_proof_reject_proof(api_handle, api_handle_connection)
        },
    )
}
fn wire_disclosed_proof_get_proof_msg_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_get_proof_msg",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_get_proof_msg(api_handle)
        },
    )
}
fn wire_disclosed_proof_serialize_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_serialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_serialize(api_handle)
        },
    )
}
fn wire_disclosed_proof_deserialize_impl(
    port_: MessagePort,
    data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_deserialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| disclosed_proof_deserialize(api_data)
        },
    )
}
fn wire_v2_disclosed_proof_update_state_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    connection_handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "v2_disclosed_proof_update_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_connection_handle = connection_handle.wire2api();
            move |task_callback| v2_disclosed_proof_update_state(api_handle, api_connection_handle)
        },
    )
}
fn wire_v2_disclosed_proof_update_state_with_message_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    message: impl Wire2Api<String> + UnwindSafe,
    connection_handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "v2_disclosed_proof_update_state_with_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_message = message.wire2api();
            let api_connection_handle = connection_handle.wire2api();
            move |task_callback| {
                v2_disclosed_proof_update_state_with_message(
                    api_handle,
                    api_message,
                    api_connection_handle,
                )
            }
        },
    )
}
fn wire_disclosed_proof_get_state_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_get_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_get_state(api_handle)
        },
    )
}
fn wire_disclosed_proof_get_requests_impl(
    port_: MessagePort,
    handle_connection: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_get_requests",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle_connection = handle_connection.wire2api();
            move |task_callback| disclosed_proof_get_requests(api_handle_connection)
        },
    )
}
fn wire_disclosed_proof_retrieve_credentials_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_retrieve_credentials",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_retrieve_credentials(api_handle)
        },
    )
}
fn wire_disclosed_proof_get_proof_request_attachment_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_get_proof_request_attachment",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_get_proof_request_attachment(api_handle)
        },
    )
}
fn wire_disclosed_proof_generate_proof_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    credentials: impl Wire2Api<String> + UnwindSafe,
    self_attested_attrs: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_generate_proof",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_credentials = credentials.wire2api();
            let api_self_attested_attrs = self_attested_attrs.wire2api();
            move |task_callback| {
                disclosed_proof_generate_proof(api_handle, api_credentials, api_self_attested_attrs)
            }
        },
    )
}
fn wire_disclosed_proof_decline_presentation_request_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    connection_handle: impl Wire2Api<u32> + UnwindSafe,
    reason: impl Wire2Api<Option<String>> + UnwindSafe,
    proposal: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_decline_presentation_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_connection_handle = connection_handle.wire2api();
            let api_reason = reason.wire2api();
            let api_proposal = proposal.wire2api();
            move |task_callback| {
                disclosed_proof_decline_presentation_request(
                    api_handle,
                    api_connection_handle,
                    api_reason,
                    api_proposal,
                )
            }
        },
    )
}
fn wire_disclosed_proof_get_thread_id_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disclosed_proof_get_thread_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| disclosed_proof_get_thread_id(api_handle)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_create_with_request(
        port_: MessagePort,
        source_id: String,
        proof_req: String,
    ) {
        wire_disclosed_proof_create_with_request_impl(port_, source_id, proof_req)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_release(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_release_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_send_proof(
        port_: MessagePort,
        handle: u32,
        handle_connection: u32,
    ) {
        wire_disclosed_proof_send_proof_impl(port_, handle, handle_connection)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_reject_proof(
        port_: MessagePort,
        handle: u32,
        handle_connection: u32,
    ) {
        wire_disclosed_proof_reject_proof_impl(port_, handle, handle_connection)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_get_proof_msg(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_get_proof_msg_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_serialize(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_serialize_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_deserialize(port_: MessagePort, data: String) {
        wire_disclosed_proof_deserialize_impl(port_, data)
    }

    #[wasm_bindgen]
    pub fn wire_v2_disclosed_proof_update_state(
        port_: MessagePort,
        handle: u32,
        connection_handle: u32,
    ) {
        wire_v2_disclosed_proof_update_state_impl(port_, handle, connection_handle)
    }

    #[wasm_bindgen]
    pub fn wire_v2_disclosed_proof_update_state_with_message(
        port_: MessagePort,
        handle: u32,
        message: String,
        connection_handle: u32,
    ) {
        wire_v2_disclosed_proof_update_state_with_message_impl(
            port_,
            handle,
            message,
            connection_handle,
        )
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_get_state(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_get_state_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_get_requests(port_: MessagePort, handle_connection: u32) {
        wire_disclosed_proof_get_requests_impl(port_, handle_connection)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_retrieve_credentials(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_retrieve_credentials_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_get_proof_request_attachment(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_get_proof_request_attachment_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_generate_proof(
        port_: MessagePort,
        handle: u32,
        credentials: String,
        self_attested_attrs: String,
    ) {
        wire_disclosed_proof_generate_proof_impl(port_, handle, credentials, self_attested_attrs)
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_decline_presentation_request(
        port_: MessagePort,
        handle: u32,
        connection_handle: u32,
        reason: Option<String>,
        proposal: Option<String>,
    ) {
        wire_disclosed_proof_decline_presentation_request_impl(
            port_,
            handle,
            connection_handle,
            reason,
            proposal,
        )
    }

    #[wasm_bindgen]
    pub fn wire_disclosed_proof_get_thread_id(port_: MessagePort, handle: u32) {
        wire_disclosed_proof_get_thread_id_impl(port_, handle)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<Option<String>> for JsValue {
        fn wire2api(self) -> Option<String> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_create_with_request(
        port_: i64,
        source_id: *mut wire_uint_8_list,
        proof_req: *mut wire_uint_8_list,
    ) {
        wire_disclosed_proof_create_with_request_impl(port_, source_id, proof_req)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_release(port_: i64, handle: u32) {
        wire_disclosed_proof_release_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_send_proof(
        port_: i64,
        handle: u32,
        handle_connection: u32,
    ) {
        wire_disclosed_proof_send_proof_impl(port_, handle, handle_connection)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_reject_proof(
        port_: i64,
        handle: u32,
        handle_connection: u32,
    ) {
        wire_disclosed_proof_reject_proof_impl(port_, handle, handle_connection)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_get_proof_msg(port_: i64, handle: u32) {
        wire_disclosed_proof_get_proof_msg_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_serialize(port_: i64, handle: u32) {
        wire_disclosed_proof_serialize_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_deserialize(port_: i64, data: *mut wire_uint_8_list) {
        wire_disclosed_proof_deserialize_impl(port_, data)
    }

    #[no_mangle]
    pub extern "C" fn wire_v2_disclosed_proof_update_state(
        port_: i64,
        handle: u32,
        connection_handle: u32,
    ) {
        wire_v2_disclosed_proof_update_state_impl(port_, handle, connection_handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_v2_disclosed_proof_update_state_with_message(
        port_: i64,
        handle: u32,
        message: *mut wire_uint_8_list,
        connection_handle: u32,
    ) {
        wire_v2_disclosed_proof_update_state_with_message_impl(
            port_,
            handle,
            message,
            connection_handle,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_get_state(port_: i64, handle: u32) {
        wire_disclosed_proof_get_state_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_get_requests(port_: i64, handle_connection: u32) {
        wire_disclosed_proof_get_requests_impl(port_, handle_connection)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_retrieve_credentials(port_: i64, handle: u32) {
        wire_disclosed_proof_retrieve_credentials_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_get_proof_request_attachment(port_: i64, handle: u32) {
        wire_disclosed_proof_get_proof_request_attachment_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_generate_proof(
        port_: i64,
        handle: u32,
        credentials: *mut wire_uint_8_list,
        self_attested_attrs: *mut wire_uint_8_list,
    ) {
        wire_disclosed_proof_generate_proof_impl(port_, handle, credentials, self_attested_attrs)
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_decline_presentation_request(
        port_: i64,
        handle: u32,
        connection_handle: u32,
        reason: *mut wire_uint_8_list,
        proposal: *mut wire_uint_8_list,
    ) {
        wire_disclosed_proof_decline_presentation_request_impl(
            port_,
            handle,
            connection_handle,
            reason,
            proposal,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_disclosed_proof_get_thread_id(port_: i64, handle: u32) {
        wire_disclosed_proof_get_thread_id_impl(port_, handle)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_4(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
