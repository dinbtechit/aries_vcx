#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.67.0.

use crate::ledger::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_ledger_author_agreement_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_ledger_author_agreement",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_ledger_author_agreement(),
    )
}
fn wire_set_active_txn_author_agreement_meta_impl(
    port_: MessagePort,
    text: impl Wire2Api<Option<String>> + UnwindSafe,
    version: impl Wire2Api<Option<String>> + UnwindSafe,
    hash: impl Wire2Api<Option<String>> + UnwindSafe,
    acc_mech_type: impl Wire2Api<String> + UnwindSafe,
    time_of_acceptance: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_active_txn_author_agreement_meta",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_text = text.wire2api();
            let api_version = version.wire2api();
            let api_hash = hash.wire2api();
            let api_acc_mech_type = acc_mech_type.wire2api();
            let api_time_of_acceptance = time_of_acceptance.wire2api();
            move |task_callback| {
                set_active_txn_author_agreement_meta(
                    api_text,
                    api_version,
                    api_hash,
                    api_acc_mech_type,
                    api_time_of_acceptance,
                )
            }
        },
    )
}
fn wire_create_service_impl(
    port_: MessagePort,
    target_did: impl Wire2Api<String> + UnwindSafe,
    recipient_keys: impl Wire2Api<Vec<String>> + UnwindSafe,
    routing_keys: impl Wire2Api<Vec<String>> + UnwindSafe,
    endpoint: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_service",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_target_did = target_did.wire2api();
            let api_recipient_keys = recipient_keys.wire2api();
            let api_routing_keys = routing_keys.wire2api();
            let api_endpoint = endpoint.wire2api();
            move |task_callback| {
                Ok(mirror_AriesService(create_service(
                    api_target_did,
                    api_recipient_keys,
                    api_routing_keys,
                    api_endpoint,
                )?))
            }
        },
    )
}
fn wire_get_service_from_ledger_impl(
    port_: MessagePort,
    target_did: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_service_from_ledger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_target_did = target_did.wire2api();
            move |task_callback| {
                Ok(mirror_AriesService(get_service_from_ledger(
                    api_target_did,
                )?))
            }
        },
    )
}
fn wire_get_verkey_from_ledger_impl(port_: MessagePort, did: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_verkey_from_ledger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_did = did.wire2api();
            move |task_callback| get_verkey_from_ledger(api_did)
        },
    )
}
fn wire_get_ledger_txn_impl(
    port_: MessagePort,
    seq_no: impl Wire2Api<i32> + UnwindSafe,
    submitter_did: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_ledger_txn",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seq_no = seq_no.wire2api();
            let api_submitter_did = submitter_did.wire2api();
            move |task_callback| get_ledger_txn(api_seq_no, api_submitter_did)
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_AriesService(AriesService);

// Section: static checks

const _: fn() = || {
    let AriesService = None::<AriesService>.unwrap();
    let _: String = AriesService.id;
    let _: String = AriesService.type_;
    let _: u32 = AriesService.priority;
    let _: Vec<String> = AriesService.recipient_keys;
    let _: Vec<String> = AriesService.routing_keys;
    let _: String = AriesService.service_endpoint;
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_AriesService {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.id.into_dart(),
            self.0.type_.into_dart(),
            self.0.priority.into_dart(),
            self.0.recipient_keys.into_dart(),
            self.0.routing_keys.into_dart(),
            self.0.service_endpoint.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_AriesService {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_get_ledger_author_agreement(port_: MessagePort) {
        wire_get_ledger_author_agreement_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_set_active_txn_author_agreement_meta(
        port_: MessagePort,
        text: Option<String>,
        version: Option<String>,
        hash: Option<String>,
        acc_mech_type: String,
        time_of_acceptance: u64,
    ) {
        wire_set_active_txn_author_agreement_meta_impl(
            port_,
            text,
            version,
            hash,
            acc_mech_type,
            time_of_acceptance,
        )
    }

    #[wasm_bindgen]
    pub fn wire_create_service(
        port_: MessagePort,
        target_did: String,
        recipient_keys: JsValue,
        routing_keys: JsValue,
        endpoint: String,
    ) {
        wire_create_service_impl(port_, target_did, recipient_keys, routing_keys, endpoint)
    }

    #[wasm_bindgen]
    pub fn wire_get_service_from_ledger(port_: MessagePort, target_did: String) {
        wire_get_service_from_ledger_impl(port_, target_did)
    }

    #[wasm_bindgen]
    pub fn wire_get_verkey_from_ledger(port_: MessagePort, did: String) {
        wire_get_verkey_from_ledger_impl(port_, did)
    }

    #[wasm_bindgen]
    pub fn wire_get_ledger_txn(port_: MessagePort, seq_no: i32, submitter_did: Option<String>) {
        wire_get_ledger_txn_impl(port_, seq_no, submitter_did)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Vec<String>> for JsValue {
        fn wire2api(self) -> Vec<String> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Option<String>> for JsValue {
        fn wire2api(self) -> Option<String> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u64> for JsValue {
        fn wire2api(self) -> u64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_get_ledger_author_agreement(port_: i64) {
        wire_get_ledger_author_agreement_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_active_txn_author_agreement_meta(
        port_: i64,
        text: *mut wire_uint_8_list,
        version: *mut wire_uint_8_list,
        hash: *mut wire_uint_8_list,
        acc_mech_type: *mut wire_uint_8_list,
        time_of_acceptance: u64,
    ) {
        wire_set_active_txn_author_agreement_meta_impl(
            port_,
            text,
            version,
            hash,
            acc_mech_type,
            time_of_acceptance,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_create_service(
        port_: i64,
        target_did: *mut wire_uint_8_list,
        recipient_keys: *mut wire_StringList,
        routing_keys: *mut wire_StringList,
        endpoint: *mut wire_uint_8_list,
    ) {
        wire_create_service_impl(port_, target_did, recipient_keys, routing_keys, endpoint)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_service_from_ledger(port_: i64, target_did: *mut wire_uint_8_list) {
        wire_get_service_from_ledger_impl(port_, target_did)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_verkey_from_ledger(port_: i64, did: *mut wire_uint_8_list) {
        wire_get_verkey_from_ledger_impl(port_, did)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_ledger_txn(
        port_: i64,
        seq_no: i32,
        submitter_did: *mut wire_uint_8_list,
    ) {
        wire_get_ledger_txn_impl(port_, seq_no, submitter_did)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_StringList_6(len: i32) -> *mut wire_StringList {
        let wrap = wire_StringList {
            ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_6(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Vec<String>> for *mut wire_StringList {
        fn wire2api(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_StringList {
        ptr: *mut *mut wire_uint_8_list,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
