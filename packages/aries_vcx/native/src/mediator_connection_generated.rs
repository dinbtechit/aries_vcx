#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.61.1.

use crate::mediator_connection::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_mediated_connection_generate_public_invite_impl(
    port_: MessagePort,
    public_did: impl Wire2Api<String> + UnwindSafe,
    label: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_generate_public_invite",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_public_did = public_did.wire2api();
            let api_label = label.wire2api();
            move |task_callback| {
                mediated_connection_generate_public_invite(api_public_did, api_label)
            }
        },
    )
}
fn wire_mediated_connection_get_pw_did_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_get_pw_did",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_get_pw_did(api_handle)
        },
    )
}
fn wire_mediated_connection_get_their_pw_did_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_get_their_pw_did",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_get_their_pw_did(api_handle)
        },
    )
}
fn wire_mediated_connection_get_thread_id_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_get_thread_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_get_thread_id(api_handle)
        },
    )
}
fn wire_mediated_connection_get_state_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_get_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| Ok(mediated_connection_get_state(api_handle))
        },
    )
}
fn wire_mediated_connection_get_source_id_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_get_source_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_get_source_id(api_handle)
        },
    )
}
fn wire_mediated_connection_create_impl(
    port_: MessagePort,
    source_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_create",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_source_id = source_id.wire2api();
            move |task_callback| mediated_connection_create(api_source_id)
        },
    )
}
fn wire_mediated_connection_create_with_invite_impl(
    port_: MessagePort,
    source_id: impl Wire2Api<String> + UnwindSafe,
    details: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_create_with_invite",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_source_id = source_id.wire2api();
            let api_details = details.wire2api();
            move |task_callback| mediated_connection_create_with_invite(api_source_id, api_details)
        },
    )
}
fn wire_mediated_connection_send_message_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    msg: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_send_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_msg = msg.wire2api();
            move |task_callback| mediated_connection_send_message(api_handle, api_msg)
        },
    )
}
fn wire_mediated_connection_create_with_connection_request_v2_impl(
    port_: MessagePort,
    request: impl Wire2Api<String> + UnwindSafe,
    pw_info: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_create_with_connection_request_v2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            let api_pw_info = pw_info.wire2api();
            move |task_callback| {
                mediated_connection_create_with_connection_request_v2(api_request, api_pw_info)
            }
        },
    )
}
fn wire_mediated_connection_send_handshake_reuse_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    oob_msg: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_send_handshake_reuse",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_oob_msg = oob_msg.wire2api();
            move |task_callback| mediated_connection_send_handshake_reuse(api_handle, api_oob_msg)
        },
    )
}
fn wire_mediated_connection_update_state_with_message_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_update_state_with_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_message = message.wire2api();
            move |task_callback| {
                mediated_connection_update_state_with_message(api_handle, api_message)
            }
        },
    )
}
fn wire_mediated_connection_handle_message_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_handle_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_message = message.wire2api();
            move |task_callback| mediated_connection_handle_message(api_handle, api_message)
        },
    )
}
fn wire_mediated_connection_update_state_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_update_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_update_state(api_handle)
        },
    )
}
fn wire_mediated_connection_delete_connection_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_delete_connection",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_delete_connection(api_handle)
        },
    )
}
fn wire_mediated_connection_connect_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_connect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_connect(api_handle)
        },
    )
}
fn wire_mediated_connection_serialize_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_serialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_serialize(api_handle)
        },
    )
}
fn wire_mediated_connection_deserialize_impl(
    port_: MessagePort,
    connection_data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_deserialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_connection_data = connection_data.wire2api();
            move |task_callback| mediated_connection_deserialize(api_connection_data)
        },
    )
}
fn wire_mediated_connection_release_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_release",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_release(api_handle)
        },
    )
}
fn wire_mediated_connection_invite_details_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_invite_details",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_invite_details(api_handle)
        },
    )
}
fn wire_mediated_connection_send_ping_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    comment: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_send_ping",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_comment = comment.wire2api();
            move |task_callback| mediated_connection_send_ping(api_handle, api_comment)
        },
    )
}
fn wire_mediated_connection_send_discovery_features_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    query: impl Wire2Api<Option<String>> + UnwindSafe,
    comment: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_send_discovery_features",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_query = query.wire2api();
            let api_comment = comment.wire2api();
            move |task_callback| {
                mediated_connection_send_discovery_features(api_handle, api_query, api_comment)
            }
        },
    )
}
fn wire_mediated_connection_info_impl(port_: MessagePort, handle: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            move |task_callback| mediated_connection_info(api_handle)
        },
    )
}
fn wire_mediated_connection_messages_download_impl(
    port_: MessagePort,
    conn_handles: impl Wire2Api<Vec<u32>> + UnwindSafe,
    status_codes: impl Wire2Api<Option<String>> + UnwindSafe,
    uids: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_messages_download",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_conn_handles = conn_handles.wire2api();
            let api_status_codes = status_codes.wire2api();
            let api_uids = uids.wire2api();
            move |task_callback| {
                mediated_connection_messages_download(api_conn_handles, api_status_codes, api_uids)
            }
        },
    )
}
fn wire_mediated_connection_sign_data_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_sign_data",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_data = data.wire2api();
            move |task_callback| mediated_connection_sign_data(api_handle, api_data)
        },
    )
}
fn wire_mediated_connection_verify_signature_impl(
    port_: MessagePort,
    handle: impl Wire2Api<u32> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
    signature: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mediated_connection_verify_signature",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_handle = handle.wire2api();
            let api_data = data.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| {
                mediated_connection_verify_signature(api_handle, api_data, api_signature)
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_mediated_connection_generate_public_invite(
        port_: MessagePort,
        public_did: String,
        label: String,
    ) {
        wire_mediated_connection_generate_public_invite_impl(port_, public_did, label)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_get_pw_did(port_: MessagePort, handle: u32) {
        wire_mediated_connection_get_pw_did_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_get_their_pw_did(port_: MessagePort, handle: u32) {
        wire_mediated_connection_get_their_pw_did_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_get_thread_id(port_: MessagePort, handle: u32) {
        wire_mediated_connection_get_thread_id_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_get_state(port_: MessagePort, handle: u32) {
        wire_mediated_connection_get_state_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_get_source_id(port_: MessagePort, handle: u32) {
        wire_mediated_connection_get_source_id_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_create(port_: MessagePort, source_id: String) {
        wire_mediated_connection_create_impl(port_, source_id)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_create_with_invite(
        port_: MessagePort,
        source_id: String,
        details: String,
    ) {
        wire_mediated_connection_create_with_invite_impl(port_, source_id, details)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_send_message(port_: MessagePort, handle: u32, msg: String) {
        wire_mediated_connection_send_message_impl(port_, handle, msg)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_create_with_connection_request_v2(
        port_: MessagePort,
        request: String,
        pw_info: String,
    ) {
        wire_mediated_connection_create_with_connection_request_v2_impl(port_, request, pw_info)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_send_handshake_reuse(
        port_: MessagePort,
        handle: u32,
        oob_msg: String,
    ) {
        wire_mediated_connection_send_handshake_reuse_impl(port_, handle, oob_msg)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_update_state_with_message(
        port_: MessagePort,
        handle: u32,
        message: String,
    ) {
        wire_mediated_connection_update_state_with_message_impl(port_, handle, message)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_handle_message(
        port_: MessagePort,
        handle: u32,
        message: String,
    ) {
        wire_mediated_connection_handle_message_impl(port_, handle, message)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_update_state(port_: MessagePort, handle: u32) {
        wire_mediated_connection_update_state_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_delete_connection(port_: MessagePort, handle: u32) {
        wire_mediated_connection_delete_connection_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_connect(port_: MessagePort, handle: u32) {
        wire_mediated_connection_connect_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_serialize(port_: MessagePort, handle: u32) {
        wire_mediated_connection_serialize_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_deserialize(port_: MessagePort, connection_data: String) {
        wire_mediated_connection_deserialize_impl(port_, connection_data)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_release(port_: MessagePort, handle: u32) {
        wire_mediated_connection_release_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_invite_details(port_: MessagePort, handle: u32) {
        wire_mediated_connection_invite_details_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_send_ping(
        port_: MessagePort,
        handle: u32,
        comment: Option<String>,
    ) {
        wire_mediated_connection_send_ping_impl(port_, handle, comment)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_send_discovery_features(
        port_: MessagePort,
        handle: u32,
        query: Option<String>,
        comment: Option<String>,
    ) {
        wire_mediated_connection_send_discovery_features_impl(port_, handle, query, comment)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_info(port_: MessagePort, handle: u32) {
        wire_mediated_connection_info_impl(port_, handle)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_messages_download(
        port_: MessagePort,
        conn_handles: Box<[u32]>,
        status_codes: Option<String>,
        uids: Option<String>,
    ) {
        wire_mediated_connection_messages_download_impl(port_, conn_handles, status_codes, uids)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_sign_data(port_: MessagePort, handle: u32, data: Box<[u8]>) {
        wire_mediated_connection_sign_data_impl(port_, handle, data)
    }

    #[wasm_bindgen]
    pub fn wire_mediated_connection_verify_signature(
        port_: MessagePort,
        handle: u32,
        data: Box<[u8]>,
        signature: Box<[u8]>,
    ) {
        wire_mediated_connection_verify_signature_impl(port_, handle, data, signature)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<Vec<u32>> for Box<[u32]> {
        fn wire2api(self) -> Vec<u32> {
            self.into_vec()
        }
    }
    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<Option<String>> for JsValue {
        fn wire2api(self) -> Option<String> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u32>> for JsValue {
        fn wire2api(self) -> Vec<u32> {
            self.unchecked_into::<js_sys::Uint32Array>().to_vec().into()
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_generate_public_invite(
        port_: i64,
        public_did: *mut wire_uint_8_list,
        label: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_generate_public_invite_impl(port_, public_did, label)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_get_pw_did(port_: i64, handle: u32) {
        wire_mediated_connection_get_pw_did_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_get_their_pw_did(port_: i64, handle: u32) {
        wire_mediated_connection_get_their_pw_did_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_get_thread_id(port_: i64, handle: u32) {
        wire_mediated_connection_get_thread_id_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_get_state(port_: i64, handle: u32) {
        wire_mediated_connection_get_state_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_get_source_id(port_: i64, handle: u32) {
        wire_mediated_connection_get_source_id_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_create(
        port_: i64,
        source_id: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_create_impl(port_, source_id)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_create_with_invite(
        port_: i64,
        source_id: *mut wire_uint_8_list,
        details: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_create_with_invite_impl(port_, source_id, details)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_send_message(
        port_: i64,
        handle: u32,
        msg: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_send_message_impl(port_, handle, msg)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_create_with_connection_request_v2(
        port_: i64,
        request: *mut wire_uint_8_list,
        pw_info: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_create_with_connection_request_v2_impl(port_, request, pw_info)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_send_handshake_reuse(
        port_: i64,
        handle: u32,
        oob_msg: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_send_handshake_reuse_impl(port_, handle, oob_msg)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_update_state_with_message(
        port_: i64,
        handle: u32,
        message: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_update_state_with_message_impl(port_, handle, message)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_handle_message(
        port_: i64,
        handle: u32,
        message: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_handle_message_impl(port_, handle, message)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_update_state(port_: i64, handle: u32) {
        wire_mediated_connection_update_state_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_delete_connection(port_: i64, handle: u32) {
        wire_mediated_connection_delete_connection_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_connect(port_: i64, handle: u32) {
        wire_mediated_connection_connect_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_serialize(port_: i64, handle: u32) {
        wire_mediated_connection_serialize_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_deserialize(
        port_: i64,
        connection_data: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_deserialize_impl(port_, connection_data)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_release(port_: i64, handle: u32) {
        wire_mediated_connection_release_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_invite_details(port_: i64, handle: u32) {
        wire_mediated_connection_invite_details_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_send_ping(
        port_: i64,
        handle: u32,
        comment: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_send_ping_impl(port_, handle, comment)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_send_discovery_features(
        port_: i64,
        handle: u32,
        query: *mut wire_uint_8_list,
        comment: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_send_discovery_features_impl(port_, handle, query, comment)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_info(port_: i64, handle: u32) {
        wire_mediated_connection_info_impl(port_, handle)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_messages_download(
        port_: i64,
        conn_handles: *mut wire_uint_32_list,
        status_codes: *mut wire_uint_8_list,
        uids: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_messages_download_impl(port_, conn_handles, status_codes, uids)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_sign_data(
        port_: i64,
        handle: u32,
        data: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_sign_data_impl(port_, handle, data)
    }

    #[no_mangle]
    pub extern "C" fn wire_mediated_connection_verify_signature(
        port_: i64,
        handle: u32,
        data: *mut wire_uint_8_list,
        signature: *mut wire_uint_8_list,
    ) {
        wire_mediated_connection_verify_signature_impl(port_, handle, data, signature)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_uint_32_list_8(len: i32) -> *mut wire_uint_32_list {
        let ans = wire_uint_32_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_8(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<Vec<u32>> for *mut wire_uint_32_list {
        fn wire2api(self) -> Vec<u32> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_32_list {
        ptr: *mut u32,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
